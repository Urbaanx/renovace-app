/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * api
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  Config,
  DeleteApiConfigParams,
  DeleteApiObjectPermsObjectIdUserIdParams,
  DeleteApiRenovationPermissionsRenovationIdUserIdParams,
  DeleteApiRoomPermissionsRoomIdUserIdParams,
  GetAdminGetObjectsInRenovationsParams,
  GetAdminGetObjectsParams,
  GetAdminGetObjectsPermissionsParams,
  GetAdminGetRenovationPermissionsParams,
  GetAdminGetRenovationsParams,
  GetAdminGetRoomModelAdminParams,
  GetAdminGetRoomPermissionsParams,
  GetAdminGetRoomsInRenovationsParams,
  GetAdminGetRoomsParams,
  GetApiObjectAvailableParams,
  GetApiObjectGsServiceErrorParams,
  GetApiObjectPermsParams,
  GetApiObjectShareGetOwnerInfoParams,
  GetApiObjectShareGetUsersParams,
  GetApiObjectsInRenovationsAvailableParams,
  GetApiPortalObjectParams,
  GetApiPortalObjectsInRenovationsParams,
  GetApiPortalRenovationParams,
  GetApiPortalRoomsInRenovationsParams,
  GetApiPortalThumbnailIdParams,
  GetApiRenovationAvailableParams,
  GetApiRenovationPermissionsParams,
  GetApiRenovationRoomIdParams,
  GetApiRenovationShareGetOwnerInfoParams,
  GetApiRenovationShareGetUsersParams,
  GetApiRoomAvailableParams,
  GetApiRoomGsServiceErrorParams,
  GetApiRoomOwnerIdParams,
  GetApiRoomPermissionsParams,
  GetApiRoomShareGetOwnerInfoParams,
  GetApiRoomShareGetUsersParams,
  GetApiRoomsInRenovationsAvailableParams,
  GetUserHasRoleParams,
  Obj,
  ObjApiGetReturnType,
  ObjectApiGetReturnType,
  ObjectInRenovation,
  ObjectInRenovationApiGetReturnType,
  ObjectPerms,
  ObjectPermsApiGetReturnType,
  PatchApiUsersPasswordResetParams,
  PatchApiUsersUpdateMetadataClearParams,
  PostApiBlobStorageUploadObjectBody,
  PostApiBlobStorageUploadObjectParams,
  PostApiBlobStorageUploadRoomBody,
  PostApiBlobStorageUploadRoomParams,
  PostApiModelsGenerateObjectParams,
  PostApiModelsGenerateRoomParams,
  PostApiObjectCreateAndGenerateBody,
  PostApiObjectCreateAndGenerateParams,
  PostApiRoomCreateAndGenerateBody,
  PostApiRoomCreateAndGenerateParams,
  PostObject,
  PostObjectInRenovation,
  PostObjectPermissions,
  PostRenovation,
  PostRenovationPermissions,
  PostRoom,
  PostRoomInRenovation,
  PostRoomPermissions,
  PostShare,
  PutApiConfigParams,
  PutApiObjectGsServiceErrorParams,
  PutApiObjectGsServiceModelGeneratedParams,
  PutApiObjectPermsParams,
  PutApiObjectsInRenovationsParams,
  PutApiRenovationPermissionsParams,
  PutApiRoomGsServiceErrorParams,
  PutApiRoomGsServiceModelGeneratedParams,
  PutApiRoomPermissionsParams,
  PutApiRoomsInRenovationsParams,
  Renovation,
  RenovationApiGetReturnType,
  RenovationPerms,
  RenovationPermsApiGetReturnType,
  Room,
  RoomApiGetReturnType,
  RoomInRenovation,
  RoomInRenovationApiGetReturnType,
  RoomPerms,
  RoomPermsApiGetReturnType,
  SubscriptionInfo,
  UserMetadata,
  UserMetadataDecorator,
  UserMetadataShop
} from './api.schemas';

import { axiosInstance } from '../axiosInstance';
import type { ErrorType , BodyType } from '../axiosInstance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const deleteApiAdminClearCache = (
    
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Admin/clearCache`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiAdminClearCacheMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminClearCache>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminClearCache>>, TError,void, TContext> => {
    
const mutationKey = ['deleteApiAdminClearCache'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAdminClearCache>>, void> = () => {
          

          return  deleteApiAdminClearCache(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAdminClearCacheMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAdminClearCache>>>
    
    export type DeleteApiAdminClearCacheMutationError = ErrorType<unknown>

    export const useDeleteApiAdminClearCache = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAdminClearCache>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiAdminClearCache>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiAdminClearCacheMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const postApiBlobStorageUploadObject = (
    postApiBlobStorageUploadObjectBody: BodyType<PostApiBlobStorageUploadObjectBody>,
    params?: PostApiBlobStorageUploadObjectParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiBlobStorageUploadObjectBody.file !== undefined) {
 formData.append('file', postApiBlobStorageUploadObjectBody.file)
 }

      return axiosInstance<void>(
      {url: `/api/BlobStorage/upload/object`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params, signal
    },
      options);
    }
  


export const getPostApiBlobStorageUploadObjectMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBlobStorageUploadObject>>, TError,{data: BodyType<PostApiBlobStorageUploadObjectBody>;params?: PostApiBlobStorageUploadObjectParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiBlobStorageUploadObject>>, TError,{data: BodyType<PostApiBlobStorageUploadObjectBody>;params?: PostApiBlobStorageUploadObjectParams}, TContext> => {
    
const mutationKey = ['postApiBlobStorageUploadObject'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiBlobStorageUploadObject>>, {data: BodyType<PostApiBlobStorageUploadObjectBody>;params?: PostApiBlobStorageUploadObjectParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiBlobStorageUploadObject(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiBlobStorageUploadObjectMutationResult = NonNullable<Awaited<ReturnType<typeof postApiBlobStorageUploadObject>>>
    export type PostApiBlobStorageUploadObjectMutationBody = BodyType<PostApiBlobStorageUploadObjectBody>
    export type PostApiBlobStorageUploadObjectMutationError = ErrorType<unknown>

    export const usePostApiBlobStorageUploadObject = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBlobStorageUploadObject>>, TError,{data: BodyType<PostApiBlobStorageUploadObjectBody>;params?: PostApiBlobStorageUploadObjectParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiBlobStorageUploadObject>>,
        TError,
        {data: BodyType<PostApiBlobStorageUploadObjectBody>;params?: PostApiBlobStorageUploadObjectParams},
        TContext
      > => {

      const mutationOptions = getPostApiBlobStorageUploadObjectMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const postApiBlobStorageUploadRoom = (
    postApiBlobStorageUploadRoomBody: BodyType<PostApiBlobStorageUploadRoomBody>,
    params?: PostApiBlobStorageUploadRoomParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiBlobStorageUploadRoomBody.file !== undefined) {
 formData.append('file', postApiBlobStorageUploadRoomBody.file)
 }

      return axiosInstance<void>(
      {url: `/api/BlobStorage/upload/room`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params, signal
    },
      options);
    }
  


export const getPostApiBlobStorageUploadRoomMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBlobStorageUploadRoom>>, TError,{data: BodyType<PostApiBlobStorageUploadRoomBody>;params?: PostApiBlobStorageUploadRoomParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiBlobStorageUploadRoom>>, TError,{data: BodyType<PostApiBlobStorageUploadRoomBody>;params?: PostApiBlobStorageUploadRoomParams}, TContext> => {
    
const mutationKey = ['postApiBlobStorageUploadRoom'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiBlobStorageUploadRoom>>, {data: BodyType<PostApiBlobStorageUploadRoomBody>;params?: PostApiBlobStorageUploadRoomParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiBlobStorageUploadRoom(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiBlobStorageUploadRoomMutationResult = NonNullable<Awaited<ReturnType<typeof postApiBlobStorageUploadRoom>>>
    export type PostApiBlobStorageUploadRoomMutationBody = BodyType<PostApiBlobStorageUploadRoomBody>
    export type PostApiBlobStorageUploadRoomMutationError = ErrorType<unknown>

    export const usePostApiBlobStorageUploadRoom = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBlobStorageUploadRoom>>, TError,{data: BodyType<PostApiBlobStorageUploadRoomBody>;params?: PostApiBlobStorageUploadRoomParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiBlobStorageUploadRoom>>,
        TError,
        {data: BodyType<PostApiBlobStorageUploadRoomBody>;params?: PostApiBlobStorageUploadRoomParams},
        TContext
      > => {

      const mutationOptions = getPostApiBlobStorageUploadRoomMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiBlobStorageDownloadRoomId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/BlobStorage/downloadRoom/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiBlobStorageDownloadRoomIdQueryKey = (id: string,) => {
    return [`/api/BlobStorage/downloadRoom/${id}`] as const;
    }

    
export const getGetApiBlobStorageDownloadRoomIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiBlobStorageDownloadRoomId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiBlobStorageDownloadRoomId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiBlobStorageDownloadRoomIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBlobStorageDownloadRoomId>>> = ({ signal }) => getApiBlobStorageDownloadRoomId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiBlobStorageDownloadRoomId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiBlobStorageDownloadRoomIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBlobStorageDownloadRoomId>>>
export type GetApiBlobStorageDownloadRoomIdQueryError = ErrorType<unknown>



export function useGetApiBlobStorageDownloadRoomId<TData = Awaited<ReturnType<typeof getApiBlobStorageDownloadRoomId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiBlobStorageDownloadRoomId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiBlobStorageDownloadRoomIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiBlobStorageDownloadObjectId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/BlobStorage/downloadObject/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiBlobStorageDownloadObjectIdQueryKey = (id: string,) => {
    return [`/api/BlobStorage/downloadObject/${id}`] as const;
    }

    
export const getGetApiBlobStorageDownloadObjectIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiBlobStorageDownloadObjectId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiBlobStorageDownloadObjectId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiBlobStorageDownloadObjectIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBlobStorageDownloadObjectId>>> = ({ signal }) => getApiBlobStorageDownloadObjectId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiBlobStorageDownloadObjectId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiBlobStorageDownloadObjectIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBlobStorageDownloadObjectId>>>
export type GetApiBlobStorageDownloadObjectIdQueryError = ErrorType<unknown>



export function useGetApiBlobStorageDownloadObjectId<TData = Awaited<ReturnType<typeof getApiBlobStorageDownloadObjectId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiBlobStorageDownloadObjectId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiBlobStorageDownloadObjectIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiBlobStorageClearContainer = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/BlobStorage/clearContainer`, method: 'POST', signal
    },
      options);
    }
  


export const getPostApiBlobStorageClearContainerMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBlobStorageClearContainer>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiBlobStorageClearContainer>>, TError,void, TContext> => {
    
const mutationKey = ['postApiBlobStorageClearContainer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiBlobStorageClearContainer>>, void> = () => {
          

          return  postApiBlobStorageClearContainer(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiBlobStorageClearContainerMutationResult = NonNullable<Awaited<ReturnType<typeof postApiBlobStorageClearContainer>>>
    
    export type PostApiBlobStorageClearContainerMutationError = ErrorType<unknown>

    export const usePostApiBlobStorageClearContainer = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBlobStorageClearContainer>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiBlobStorageClearContainer>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostApiBlobStorageClearContainerMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiConfig = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Config[]>(
      {url: `/api/Config`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiConfigQueryKey = () => {
    return [`/api/Config`] as const;
    }

    
export const getGetApiConfigQueryOptions = <TData = Awaited<ReturnType<typeof getApiConfig>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConfig>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiConfigQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiConfig>>> = ({ signal }) => getApiConfig(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiConfig>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiConfigQueryResult = NonNullable<Awaited<ReturnType<typeof getApiConfig>>>
export type GetApiConfigQueryError = ErrorType<unknown>



export function useGetApiConfig<TData = Awaited<ReturnType<typeof getApiConfig>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConfig>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiConfigQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiConfig = (
    config: BodyType<Config>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Config`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: config, signal
    },
      options);
    }
  


export const getPostApiConfigMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiConfig>>, TError,{data: BodyType<Config>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiConfig>>, TError,{data: BodyType<Config>}, TContext> => {
    
const mutationKey = ['postApiConfig'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiConfig>>, {data: BodyType<Config>}> = (props) => {
          const {data} = props ?? {};

          return  postApiConfig(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiConfigMutationResult = NonNullable<Awaited<ReturnType<typeof postApiConfig>>>
    export type PostApiConfigMutationBody = BodyType<Config>
    export type PostApiConfigMutationError = ErrorType<unknown>

    export const usePostApiConfig = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiConfig>>, TError,{data: BodyType<Config>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiConfig>>,
        TError,
        {data: BodyType<Config>},
        TContext
      > => {

      const mutationOptions = getPostApiConfigMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const putApiConfig = (
    config: BodyType<Config>,
    params?: PutApiConfigParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Config`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: config,
        params
    },
      options);
    }
  


export const getPutApiConfigMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiConfig>>, TError,{data: BodyType<Config>;params?: PutApiConfigParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiConfig>>, TError,{data: BodyType<Config>;params?: PutApiConfigParams}, TContext> => {
    
const mutationKey = ['putApiConfig'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiConfig>>, {data: BodyType<Config>;params?: PutApiConfigParams}> = (props) => {
          const {data,params} = props ?? {};

          return  putApiConfig(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiConfigMutationResult = NonNullable<Awaited<ReturnType<typeof putApiConfig>>>
    export type PutApiConfigMutationBody = BodyType<Config>
    export type PutApiConfigMutationError = ErrorType<unknown>

    export const usePutApiConfig = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiConfig>>, TError,{data: BodyType<Config>;params?: PutApiConfigParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiConfig>>,
        TError,
        {data: BodyType<Config>;params?: PutApiConfigParams},
        TContext
      > => {

      const mutationOptions = getPutApiConfigMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteApiConfig = (
    params?: DeleteApiConfigParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Config`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteApiConfigMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiConfig>>, TError,{params?: DeleteApiConfigParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiConfig>>, TError,{params?: DeleteApiConfigParams}, TContext> => {
    
const mutationKey = ['deleteApiConfig'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiConfig>>, {params?: DeleteApiConfigParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiConfig(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiConfigMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiConfig>>>
    
    export type DeleteApiConfigMutationError = ErrorType<unknown>

    export const useDeleteApiConfig = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiConfig>>, TError,{params?: DeleteApiConfigParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiConfig>>,
        TError,
        {params?: DeleteApiConfigParams},
        TContext
      > => {

      const mutationOptions = getDeleteApiConfigMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const postApiModelsGenerateRoom = (
    params?: PostApiModelsGenerateRoomParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Models/generate/room`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getPostApiModelsGenerateRoomMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsGenerateRoom>>, TError,{params?: PostApiModelsGenerateRoomParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiModelsGenerateRoom>>, TError,{params?: PostApiModelsGenerateRoomParams}, TContext> => {
    
const mutationKey = ['postApiModelsGenerateRoom'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiModelsGenerateRoom>>, {params?: PostApiModelsGenerateRoomParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiModelsGenerateRoom(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiModelsGenerateRoomMutationResult = NonNullable<Awaited<ReturnType<typeof postApiModelsGenerateRoom>>>
    
    export type PostApiModelsGenerateRoomMutationError = ErrorType<unknown>

    export const usePostApiModelsGenerateRoom = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsGenerateRoom>>, TError,{params?: PostApiModelsGenerateRoomParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiModelsGenerateRoom>>,
        TError,
        {params?: PostApiModelsGenerateRoomParams},
        TContext
      > => {

      const mutationOptions = getPostApiModelsGenerateRoomMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const postApiModelsGenerateObject = (
    params?: PostApiModelsGenerateObjectParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Models/generate/object`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getPostApiModelsGenerateObjectMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsGenerateObject>>, TError,{params?: PostApiModelsGenerateObjectParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiModelsGenerateObject>>, TError,{params?: PostApiModelsGenerateObjectParams}, TContext> => {
    
const mutationKey = ['postApiModelsGenerateObject'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiModelsGenerateObject>>, {params?: PostApiModelsGenerateObjectParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiModelsGenerateObject(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiModelsGenerateObjectMutationResult = NonNullable<Awaited<ReturnType<typeof postApiModelsGenerateObject>>>
    
    export type PostApiModelsGenerateObjectMutationError = ErrorType<unknown>

    export const usePostApiModelsGenerateObject = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiModelsGenerateObject>>, TError,{params?: PostApiModelsGenerateObjectParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiModelsGenerateObject>>,
        TError,
        {params?: PostApiModelsGenerateObjectParams},
        TContext
      > => {

      const mutationOptions = getPostApiModelsGenerateObjectMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getAdminGetObjects = (
    params?: GetAdminGetObjectsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ObjApiGetReturnType>(
      {url: `/admin/GetObjects`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminGetObjectsQueryKey = (params?: GetAdminGetObjectsParams,) => {
    return [`/admin/GetObjects`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminGetObjectsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminGetObjects>>, TError = ErrorType<unknown>>(params?: GetAdminGetObjectsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetObjects>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminGetObjectsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminGetObjects>>> = ({ signal }) => getAdminGetObjects(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminGetObjects>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminGetObjectsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminGetObjects>>>
export type GetAdminGetObjectsQueryError = ErrorType<unknown>



export function useGetAdminGetObjects<TData = Awaited<ReturnType<typeof getAdminGetObjects>>, TError = ErrorType<unknown>>(
 params?: GetAdminGetObjectsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetObjects>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAdminGetObjectsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiObjectAvailable = (
    params?: GetApiObjectAvailableParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ObjectApiGetReturnType>(
      {url: `/api/Object/available`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiObjectAvailableQueryKey = (params?: GetApiObjectAvailableParams,) => {
    return [`/api/Object/available`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiObjectAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getApiObjectAvailable>>, TError = ErrorType<unknown>>(params?: GetApiObjectAvailableParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectAvailable>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiObjectAvailableQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiObjectAvailable>>> = ({ signal }) => getApiObjectAvailable(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiObjectAvailable>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiObjectAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getApiObjectAvailable>>>
export type GetApiObjectAvailableQueryError = ErrorType<unknown>



export function useGetApiObjectAvailable<TData = Awaited<ReturnType<typeof getApiObjectAvailable>>, TError = ErrorType<unknown>>(
 params?: GetApiObjectAvailableParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectAvailable>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiObjectAvailableQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiObjectId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/Object/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiObjectIdQueryKey = (id: string,) => {
    return [`/api/Object/${id}`] as const;
    }

    
export const getGetApiObjectIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiObjectId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiObjectIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiObjectId>>> = ({ signal }) => getApiObjectId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiObjectId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiObjectIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiObjectId>>>
export type GetApiObjectIdQueryError = ErrorType<unknown>



export function useGetApiObjectId<TData = Awaited<ReturnType<typeof getApiObjectId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiObjectIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiObjectId = (
    id: string,
    obj: BodyType<Obj>,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/Object/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: obj
    },
      options);
    }
  


export const getPutApiObjectIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiObjectId>>, TError,{id: string;data: BodyType<Obj>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiObjectId>>, TError,{id: string;data: BodyType<Obj>}, TContext> => {
    
const mutationKey = ['putApiObjectId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiObjectId>>, {id: string;data: BodyType<Obj>}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiObjectId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiObjectIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiObjectId>>>
    export type PutApiObjectIdMutationBody = BodyType<Obj>
    export type PutApiObjectIdMutationError = ErrorType<unknown>

    export const usePutApiObjectId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiObjectId>>, TError,{id: string;data: BodyType<Obj>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiObjectId>>,
        TError,
        {id: string;data: BodyType<Obj>},
        TContext
      > => {

      const mutationOptions = getPutApiObjectIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteApiObjectId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/Object/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiObjectIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteApiObjectId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiObjectId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiObjectId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiObjectIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiObjectId>>>
    
    export type DeleteApiObjectIdMutationError = ErrorType<unknown>

    export const useDeleteApiObjectId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiObjectId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiObjectIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiObjectThumbnailId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Blob>(
      {url: `/api/Object/thumbnail/${id}`, method: 'GET',
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetApiObjectThumbnailIdQueryKey = (id: string,) => {
    return [`/api/Object/thumbnail/${id}`] as const;
    }

    
export const getGetApiObjectThumbnailIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiObjectThumbnailId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectThumbnailId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiObjectThumbnailIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiObjectThumbnailId>>> = ({ signal }) => getApiObjectThumbnailId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiObjectThumbnailId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiObjectThumbnailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiObjectThumbnailId>>>
export type GetApiObjectThumbnailIdQueryError = ErrorType<unknown>



export function useGetApiObjectThumbnailId<TData = Awaited<ReturnType<typeof getApiObjectThumbnailId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectThumbnailId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiObjectThumbnailIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiObjectModelId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Blob>(
      {url: `/api/Object/model/${id}`, method: 'GET',
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetApiObjectModelIdQueryKey = (id: string,) => {
    return [`/api/Object/model/${id}`] as const;
    }

    
export const getGetApiObjectModelIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiObjectModelId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectModelId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiObjectModelIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiObjectModelId>>> = ({ signal }) => getApiObjectModelId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiObjectModelId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiObjectModelIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiObjectModelId>>>
export type GetApiObjectModelIdQueryError = ErrorType<unknown>



export function useGetApiObjectModelId<TData = Awaited<ReturnType<typeof getApiObjectModelId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectModelId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiObjectModelIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiObjectCreateAndGenerate = (
    postApiObjectCreateAndGenerateBody: BodyType<PostApiObjectCreateAndGenerateBody>,
    params?: PostApiObjectCreateAndGenerateParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiObjectCreateAndGenerateBody.file !== undefined) {
 formData.append('file', postApiObjectCreateAndGenerateBody.file)
 }

      return axiosInstance<void>(
      {url: `/api/Object/createAndGenerate`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params, signal
    },
      options);
    }
  


export const getPostApiObjectCreateAndGenerateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiObjectCreateAndGenerate>>, TError,{data: BodyType<PostApiObjectCreateAndGenerateBody>;params?: PostApiObjectCreateAndGenerateParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiObjectCreateAndGenerate>>, TError,{data: BodyType<PostApiObjectCreateAndGenerateBody>;params?: PostApiObjectCreateAndGenerateParams}, TContext> => {
    
const mutationKey = ['postApiObjectCreateAndGenerate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiObjectCreateAndGenerate>>, {data: BodyType<PostApiObjectCreateAndGenerateBody>;params?: PostApiObjectCreateAndGenerateParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiObjectCreateAndGenerate(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiObjectCreateAndGenerateMutationResult = NonNullable<Awaited<ReturnType<typeof postApiObjectCreateAndGenerate>>>
    export type PostApiObjectCreateAndGenerateMutationBody = BodyType<PostApiObjectCreateAndGenerateBody>
    export type PostApiObjectCreateAndGenerateMutationError = ErrorType<unknown>

    export const usePostApiObjectCreateAndGenerate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiObjectCreateAndGenerate>>, TError,{data: BodyType<PostApiObjectCreateAndGenerateBody>;params?: PostApiObjectCreateAndGenerateParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiObjectCreateAndGenerate>>,
        TError,
        {data: BodyType<PostApiObjectCreateAndGenerateBody>;params?: PostApiObjectCreateAndGenerateParams},
        TContext
      > => {

      const mutationOptions = getPostApiObjectCreateAndGenerateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const postApiObject = (
    postObject: BodyType<PostObject>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Object`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postObject, signal
    },
      options);
    }
  


export const getPostApiObjectMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiObject>>, TError,{data: BodyType<PostObject>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiObject>>, TError,{data: BodyType<PostObject>}, TContext> => {
    
const mutationKey = ['postApiObject'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiObject>>, {data: BodyType<PostObject>}> = (props) => {
          const {data} = props ?? {};

          return  postApiObject(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiObjectMutationResult = NonNullable<Awaited<ReturnType<typeof postApiObject>>>
    export type PostApiObjectMutationBody = BodyType<PostObject>
    export type PostApiObjectMutationError = ErrorType<unknown>

    export const usePostApiObject = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiObject>>, TError,{data: BodyType<PostObject>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiObject>>,
        TError,
        {data: BodyType<PostObject>},
        TContext
      > => {

      const mutationOptions = getPostApiObjectMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const putApiObjectGsServiceModelGenerated = (
    params?: PutApiObjectGsServiceModelGeneratedParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/Object/gsService/modelGenerated`, method: 'PUT',
        params
    },
      options);
    }
  


export const getPutApiObjectGsServiceModelGeneratedMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiObjectGsServiceModelGenerated>>, TError,{params?: PutApiObjectGsServiceModelGeneratedParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiObjectGsServiceModelGenerated>>, TError,{params?: PutApiObjectGsServiceModelGeneratedParams}, TContext> => {
    
const mutationKey = ['putApiObjectGsServiceModelGenerated'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiObjectGsServiceModelGenerated>>, {params?: PutApiObjectGsServiceModelGeneratedParams}> = (props) => {
          const {params} = props ?? {};

          return  putApiObjectGsServiceModelGenerated(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiObjectGsServiceModelGeneratedMutationResult = NonNullable<Awaited<ReturnType<typeof putApiObjectGsServiceModelGenerated>>>
    
    export type PutApiObjectGsServiceModelGeneratedMutationError = ErrorType<unknown>

    export const usePutApiObjectGsServiceModelGenerated = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiObjectGsServiceModelGenerated>>, TError,{params?: PutApiObjectGsServiceModelGeneratedParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiObjectGsServiceModelGenerated>>,
        TError,
        {params?: PutApiObjectGsServiceModelGeneratedParams},
        TContext
      > => {

      const mutationOptions = getPutApiObjectGsServiceModelGeneratedMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const putApiObjectGsServiceError = (
    params?: PutApiObjectGsServiceErrorParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Object/gsService/error`, method: 'PUT',
        params
    },
      options);
    }
  


export const getPutApiObjectGsServiceErrorMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiObjectGsServiceError>>, TError,{params?: PutApiObjectGsServiceErrorParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiObjectGsServiceError>>, TError,{params?: PutApiObjectGsServiceErrorParams}, TContext> => {
    
const mutationKey = ['putApiObjectGsServiceError'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiObjectGsServiceError>>, {params?: PutApiObjectGsServiceErrorParams}> = (props) => {
          const {params} = props ?? {};

          return  putApiObjectGsServiceError(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiObjectGsServiceErrorMutationResult = NonNullable<Awaited<ReturnType<typeof putApiObjectGsServiceError>>>
    
    export type PutApiObjectGsServiceErrorMutationError = ErrorType<unknown>

    export const usePutApiObjectGsServiceError = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiObjectGsServiceError>>, TError,{params?: PutApiObjectGsServiceErrorParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiObjectGsServiceError>>,
        TError,
        {params?: PutApiObjectGsServiceErrorParams},
        TContext
      > => {

      const mutationOptions = getPutApiObjectGsServiceErrorMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiObjectGsServiceError = (
    params?: GetApiObjectGsServiceErrorParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Object/gsService/error`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiObjectGsServiceErrorQueryKey = (params?: GetApiObjectGsServiceErrorParams,) => {
    return [`/api/Object/gsService/error`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiObjectGsServiceErrorQueryOptions = <TData = Awaited<ReturnType<typeof getApiObjectGsServiceError>>, TError = ErrorType<unknown>>(params?: GetApiObjectGsServiceErrorParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectGsServiceError>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiObjectGsServiceErrorQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiObjectGsServiceError>>> = ({ signal }) => getApiObjectGsServiceError(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiObjectGsServiceError>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiObjectGsServiceErrorQueryResult = NonNullable<Awaited<ReturnType<typeof getApiObjectGsServiceError>>>
export type GetApiObjectGsServiceErrorQueryError = ErrorType<unknown>



export function useGetApiObjectGsServiceError<TData = Awaited<ReturnType<typeof getApiObjectGsServiceError>>, TError = ErrorType<unknown>>(
 params?: GetApiObjectGsServiceErrorParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectGsServiceError>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiObjectGsServiceErrorQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiObjectShareGetOwnerInfo = (
    params?: GetApiObjectShareGetOwnerInfoParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Object/share/getOwnerInfo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiObjectShareGetOwnerInfoQueryKey = (params?: GetApiObjectShareGetOwnerInfoParams,) => {
    return [`/api/Object/share/getOwnerInfo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiObjectShareGetOwnerInfoQueryOptions = <TData = Awaited<ReturnType<typeof getApiObjectShareGetOwnerInfo>>, TError = ErrorType<unknown>>(params?: GetApiObjectShareGetOwnerInfoParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectShareGetOwnerInfo>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiObjectShareGetOwnerInfoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiObjectShareGetOwnerInfo>>> = ({ signal }) => getApiObjectShareGetOwnerInfo(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiObjectShareGetOwnerInfo>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiObjectShareGetOwnerInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiObjectShareGetOwnerInfo>>>
export type GetApiObjectShareGetOwnerInfoQueryError = ErrorType<unknown>



export function useGetApiObjectShareGetOwnerInfo<TData = Awaited<ReturnType<typeof getApiObjectShareGetOwnerInfo>>, TError = ErrorType<unknown>>(
 params?: GetApiObjectShareGetOwnerInfoParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectShareGetOwnerInfo>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiObjectShareGetOwnerInfoQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiObjectShare = (
    postShare: BodyType<PostShare>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Object/share`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postShare, signal
    },
      options);
    }
  


export const getPostApiObjectShareMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiObjectShare>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiObjectShare>>, TError,{data: BodyType<PostShare>}, TContext> => {
    
const mutationKey = ['postApiObjectShare'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiObjectShare>>, {data: BodyType<PostShare>}> = (props) => {
          const {data} = props ?? {};

          return  postApiObjectShare(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiObjectShareMutationResult = NonNullable<Awaited<ReturnType<typeof postApiObjectShare>>>
    export type PostApiObjectShareMutationBody = BodyType<PostShare>
    export type PostApiObjectShareMutationError = ErrorType<unknown>

    export const usePostApiObjectShare = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiObjectShare>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiObjectShare>>,
        TError,
        {data: BodyType<PostShare>},
        TContext
      > => {

      const mutationOptions = getPostApiObjectShareMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiObjectShareGetUsers = (
    params?: GetApiObjectShareGetUsersParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Object/share/getUsers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiObjectShareGetUsersQueryKey = (params?: GetApiObjectShareGetUsersParams,) => {
    return [`/api/Object/share/getUsers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiObjectShareGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiObjectShareGetUsers>>, TError = ErrorType<unknown>>(params?: GetApiObjectShareGetUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectShareGetUsers>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiObjectShareGetUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiObjectShareGetUsers>>> = ({ signal }) => getApiObjectShareGetUsers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiObjectShareGetUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiObjectShareGetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiObjectShareGetUsers>>>
export type GetApiObjectShareGetUsersQueryError = ErrorType<unknown>



export function useGetApiObjectShareGetUsers<TData = Awaited<ReturnType<typeof getApiObjectShareGetUsers>>, TError = ErrorType<unknown>>(
 params?: GetApiObjectShareGetUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectShareGetUsers>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiObjectShareGetUsersQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiObjectShareRevoke = (
    postShare: BodyType<PostShare>,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Object/share/revoke`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: postShare
    },
      options);
    }
  


export const getDeleteApiObjectShareRevokeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectShareRevoke>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectShareRevoke>>, TError,{data: BodyType<PostShare>}, TContext> => {
    
const mutationKey = ['deleteApiObjectShareRevoke'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiObjectShareRevoke>>, {data: BodyType<PostShare>}> = (props) => {
          const {data} = props ?? {};

          return  deleteApiObjectShareRevoke(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiObjectShareRevokeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiObjectShareRevoke>>>
    export type DeleteApiObjectShareRevokeMutationBody = BodyType<PostShare>
    export type DeleteApiObjectShareRevokeMutationError = ErrorType<unknown>

    export const useDeleteApiObjectShareRevoke = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectShareRevoke>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiObjectShareRevoke>>,
        TError,
        {data: BodyType<PostShare>},
        TContext
      > => {

      const mutationOptions = getDeleteApiObjectShareRevokeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiObjectPerms = (
    params?: GetApiObjectPermsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/ObjectPerms`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiObjectPermsQueryKey = (params?: GetApiObjectPermsParams,) => {
    return [`/api/ObjectPerms`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiObjectPermsQueryOptions = <TData = Awaited<ReturnType<typeof getApiObjectPerms>>, TError = ErrorType<unknown>>(params?: GetApiObjectPermsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectPerms>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiObjectPermsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiObjectPerms>>> = ({ signal }) => getApiObjectPerms(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiObjectPerms>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiObjectPermsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiObjectPerms>>>
export type GetApiObjectPermsQueryError = ErrorType<unknown>



export function useGetApiObjectPerms<TData = Awaited<ReturnType<typeof getApiObjectPerms>>, TError = ErrorType<unknown>>(
 params?: GetApiObjectPermsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectPerms>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiObjectPermsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiObjectPerms = (
    postObjectPermissions: BodyType<PostObjectPermissions>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/ObjectPerms`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postObjectPermissions, signal
    },
      options);
    }
  


export const getPostApiObjectPermsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiObjectPerms>>, TError,{data: BodyType<PostObjectPermissions>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiObjectPerms>>, TError,{data: BodyType<PostObjectPermissions>}, TContext> => {
    
const mutationKey = ['postApiObjectPerms'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiObjectPerms>>, {data: BodyType<PostObjectPermissions>}> = (props) => {
          const {data} = props ?? {};

          return  postApiObjectPerms(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiObjectPermsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiObjectPerms>>>
    export type PostApiObjectPermsMutationBody = BodyType<PostObjectPermissions>
    export type PostApiObjectPermsMutationError = ErrorType<unknown>

    export const usePostApiObjectPerms = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiObjectPerms>>, TError,{data: BodyType<PostObjectPermissions>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiObjectPerms>>,
        TError,
        {data: BodyType<PostObjectPermissions>},
        TContext
      > => {

      const mutationOptions = getPostApiObjectPermsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const putApiObjectPerms = (
    objectPerms: BodyType<ObjectPerms>,
    params?: PutApiObjectPermsParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<ObjectPerms>(
      {url: `/api/ObjectPerms`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: objectPerms,
        params
    },
      options);
    }
  


export const getPutApiObjectPermsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiObjectPerms>>, TError,{data: BodyType<ObjectPerms>;params?: PutApiObjectPermsParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiObjectPerms>>, TError,{data: BodyType<ObjectPerms>;params?: PutApiObjectPermsParams}, TContext> => {
    
const mutationKey = ['putApiObjectPerms'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiObjectPerms>>, {data: BodyType<ObjectPerms>;params?: PutApiObjectPermsParams}> = (props) => {
          const {data,params} = props ?? {};

          return  putApiObjectPerms(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiObjectPermsMutationResult = NonNullable<Awaited<ReturnType<typeof putApiObjectPerms>>>
    export type PutApiObjectPermsMutationBody = BodyType<ObjectPerms>
    export type PutApiObjectPermsMutationError = ErrorType<unknown>

    export const usePutApiObjectPerms = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiObjectPerms>>, TError,{data: BodyType<ObjectPerms>;params?: PutApiObjectPermsParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiObjectPerms>>,
        TError,
        {data: BodyType<ObjectPerms>;params?: PutApiObjectPermsParams},
        TContext
      > => {

      const mutationOptions = getPutApiObjectPermsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getAdminGetObjectsPermissions = (
    params?: GetAdminGetObjectsPermissionsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ObjectPermsApiGetReturnType>(
      {url: `/admin/GetObjectsPermissions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminGetObjectsPermissionsQueryKey = (params?: GetAdminGetObjectsPermissionsParams,) => {
    return [`/admin/GetObjectsPermissions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminGetObjectsPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminGetObjectsPermissions>>, TError = ErrorType<unknown>>(params?: GetAdminGetObjectsPermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetObjectsPermissions>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminGetObjectsPermissionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminGetObjectsPermissions>>> = ({ signal }) => getAdminGetObjectsPermissions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminGetObjectsPermissions>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminGetObjectsPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminGetObjectsPermissions>>>
export type GetAdminGetObjectsPermissionsQueryError = ErrorType<unknown>



export function useGetAdminGetObjectsPermissions<TData = Awaited<ReturnType<typeof getAdminGetObjectsPermissions>>, TError = ErrorType<unknown>>(
 params?: GetAdminGetObjectsPermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetObjectsPermissions>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAdminGetObjectsPermissionsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiObjectPermsObjectIdUserId = (
    params?: DeleteApiObjectPermsObjectIdUserIdParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<ObjectPerms>(
      {url: `/api/ObjectPerms/objectId, userId}`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteApiObjectPermsObjectIdUserIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectPermsObjectIdUserId>>, TError,{params?: DeleteApiObjectPermsObjectIdUserIdParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectPermsObjectIdUserId>>, TError,{params?: DeleteApiObjectPermsObjectIdUserIdParams}, TContext> => {
    
const mutationKey = ['deleteApiObjectPermsObjectIdUserId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiObjectPermsObjectIdUserId>>, {params?: DeleteApiObjectPermsObjectIdUserIdParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiObjectPermsObjectIdUserId(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiObjectPermsObjectIdUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiObjectPermsObjectIdUserId>>>
    
    export type DeleteApiObjectPermsObjectIdUserIdMutationError = ErrorType<unknown>

    export const useDeleteApiObjectPermsObjectIdUserId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectPermsObjectIdUserId>>, TError,{params?: DeleteApiObjectPermsObjectIdUserIdParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiObjectPermsObjectIdUserId>>,
        TError,
        {params?: DeleteApiObjectPermsObjectIdUserIdParams},
        TContext
      > => {

      const mutationOptions = getDeleteApiObjectPermsObjectIdUserIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getAdminGetObjectsInRenovations = (
    params?: GetAdminGetObjectsInRenovationsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ObjectInRenovationApiGetReturnType>(
      {url: `/admin/GetObjectsInRenovations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminGetObjectsInRenovationsQueryKey = (params?: GetAdminGetObjectsInRenovationsParams,) => {
    return [`/admin/GetObjectsInRenovations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminGetObjectsInRenovationsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminGetObjectsInRenovations>>, TError = ErrorType<unknown>>(params?: GetAdminGetObjectsInRenovationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetObjectsInRenovations>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminGetObjectsInRenovationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminGetObjectsInRenovations>>> = ({ signal }) => getAdminGetObjectsInRenovations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminGetObjectsInRenovations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminGetObjectsInRenovationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminGetObjectsInRenovations>>>
export type GetAdminGetObjectsInRenovationsQueryError = ErrorType<unknown>



export function useGetAdminGetObjectsInRenovations<TData = Awaited<ReturnType<typeof getAdminGetObjectsInRenovations>>, TError = ErrorType<unknown>>(
 params?: GetAdminGetObjectsInRenovationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetObjectsInRenovations>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAdminGetObjectsInRenovationsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiObjectsInRenovationsAvailable = (
    params?: GetApiObjectsInRenovationsAvailableParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/ObjectsInRenovations/available`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiObjectsInRenovationsAvailableQueryKey = (params?: GetApiObjectsInRenovationsAvailableParams,) => {
    return [`/api/ObjectsInRenovations/available`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiObjectsInRenovationsAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getApiObjectsInRenovationsAvailable>>, TError = ErrorType<unknown>>(params?: GetApiObjectsInRenovationsAvailableParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectsInRenovationsAvailable>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiObjectsInRenovationsAvailableQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiObjectsInRenovationsAvailable>>> = ({ signal }) => getApiObjectsInRenovationsAvailable(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiObjectsInRenovationsAvailable>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiObjectsInRenovationsAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getApiObjectsInRenovationsAvailable>>>
export type GetApiObjectsInRenovationsAvailableQueryError = ErrorType<unknown>



export function useGetApiObjectsInRenovationsAvailable<TData = Awaited<ReturnType<typeof getApiObjectsInRenovationsAvailable>>, TError = ErrorType<unknown>>(
 params?: GetApiObjectsInRenovationsAvailableParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiObjectsInRenovationsAvailable>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiObjectsInRenovationsAvailableQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiObjectsInRenovations = (
    postObjectInRenovation: BodyType<PostObjectInRenovation>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/ObjectsInRenovations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postObjectInRenovation, signal
    },
      options);
    }
  


export const getPostApiObjectsInRenovationsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiObjectsInRenovations>>, TError,{data: BodyType<PostObjectInRenovation>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiObjectsInRenovations>>, TError,{data: BodyType<PostObjectInRenovation>}, TContext> => {
    
const mutationKey = ['postApiObjectsInRenovations'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiObjectsInRenovations>>, {data: BodyType<PostObjectInRenovation>}> = (props) => {
          const {data} = props ?? {};

          return  postApiObjectsInRenovations(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiObjectsInRenovationsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiObjectsInRenovations>>>
    export type PostApiObjectsInRenovationsMutationBody = BodyType<PostObjectInRenovation>
    export type PostApiObjectsInRenovationsMutationError = ErrorType<unknown>

    export const usePostApiObjectsInRenovations = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiObjectsInRenovations>>, TError,{data: BodyType<PostObjectInRenovation>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiObjectsInRenovations>>,
        TError,
        {data: BodyType<PostObjectInRenovation>},
        TContext
      > => {

      const mutationOptions = getPostApiObjectsInRenovationsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const putApiObjectsInRenovations = (
    objectInRenovation: BodyType<ObjectInRenovation>,
    params?: PutApiObjectsInRenovationsParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<ObjectInRenovation>(
      {url: `/api/ObjectsInRenovations`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: objectInRenovation,
        params
    },
      options);
    }
  


export const getPutApiObjectsInRenovationsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiObjectsInRenovations>>, TError,{data: BodyType<ObjectInRenovation>;params?: PutApiObjectsInRenovationsParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiObjectsInRenovations>>, TError,{data: BodyType<ObjectInRenovation>;params?: PutApiObjectsInRenovationsParams}, TContext> => {
    
const mutationKey = ['putApiObjectsInRenovations'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiObjectsInRenovations>>, {data: BodyType<ObjectInRenovation>;params?: PutApiObjectsInRenovationsParams}> = (props) => {
          const {data,params} = props ?? {};

          return  putApiObjectsInRenovations(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiObjectsInRenovationsMutationResult = NonNullable<Awaited<ReturnType<typeof putApiObjectsInRenovations>>>
    export type PutApiObjectsInRenovationsMutationBody = BodyType<ObjectInRenovation>
    export type PutApiObjectsInRenovationsMutationError = ErrorType<unknown>

    export const usePutApiObjectsInRenovations = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiObjectsInRenovations>>, TError,{data: BodyType<ObjectInRenovation>;params?: PutApiObjectsInRenovationsParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiObjectsInRenovations>>,
        TError,
        {data: BodyType<ObjectInRenovation>;params?: PutApiObjectsInRenovationsParams},
        TContext
      > => {

      const mutationOptions = getPutApiObjectsInRenovationsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteApiObjectsInRenovationsId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/ObjectsInRenovations/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiObjectsInRenovationsIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectsInRenovationsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectsInRenovationsId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteApiObjectsInRenovationsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiObjectsInRenovationsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiObjectsInRenovationsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiObjectsInRenovationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiObjectsInRenovationsId>>>
    
    export type DeleteApiObjectsInRenovationsIdMutationError = ErrorType<unknown>

    export const useDeleteApiObjectsInRenovationsId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiObjectsInRenovationsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiObjectsInRenovationsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiObjectsInRenovationsIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiGetSubscriptionInfo = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<SubscriptionInfo>(
      {url: `/api/GetSubscriptionInfo`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiGetSubscriptionInfoQueryKey = () => {
    return [`/api/GetSubscriptionInfo`] as const;
    }

    
export const getGetApiGetSubscriptionInfoQueryOptions = <TData = Awaited<ReturnType<typeof getApiGetSubscriptionInfo>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGetSubscriptionInfo>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGetSubscriptionInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGetSubscriptionInfo>>> = ({ signal }) => getApiGetSubscriptionInfo(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGetSubscriptionInfo>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGetSubscriptionInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGetSubscriptionInfo>>>
export type GetApiGetSubscriptionInfoQueryError = ErrorType<unknown>



export function useGetApiGetSubscriptionInfo<TData = Awaited<ReturnType<typeof getApiGetSubscriptionInfo>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGetSubscriptionInfo>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGetSubscriptionInfoQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiCancelSubscription = (
    
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/CancelSubscription`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiCancelSubscriptionMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCancelSubscription>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCancelSubscription>>, TError,void, TContext> => {
    
const mutationKey = ['deleteApiCancelSubscription'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCancelSubscription>>, void> = () => {
          

          return  deleteApiCancelSubscription(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCancelSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCancelSubscription>>>
    
    export type DeleteApiCancelSubscriptionMutationError = ErrorType<unknown>

    export const useDeleteApiCancelSubscription = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCancelSubscription>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiCancelSubscription>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiCancelSubscriptionMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const postWebhook = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/webhook`, method: 'POST', signal
    },
      options);
    }
  


export const getPostWebhookMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebhook>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postWebhook>>, TError,void, TContext> => {
    
const mutationKey = ['postWebhook'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWebhook>>, void> = () => {
          

          return  postWebhook(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWebhookMutationResult = NonNullable<Awaited<ReturnType<typeof postWebhook>>>
    
    export type PostWebhookMutationError = ErrorType<unknown>

    export const usePostWebhook = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebhook>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postWebhook>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostWebhookMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiPortalRenovation = (
    params?: GetApiPortalRenovationParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Portal/Renovation`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiPortalRenovationQueryKey = (params?: GetApiPortalRenovationParams,) => {
    return [`/api/Portal/Renovation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiPortalRenovationQueryOptions = <TData = Awaited<ReturnType<typeof getApiPortalRenovation>>, TError = ErrorType<unknown>>(params?: GetApiPortalRenovationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRenovation>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPortalRenovationQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPortalRenovation>>> = ({ signal }) => getApiPortalRenovation(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRenovation>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPortalRenovationQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPortalRenovation>>>
export type GetApiPortalRenovationQueryError = ErrorType<unknown>



export function useGetApiPortalRenovation<TData = Awaited<ReturnType<typeof getApiPortalRenovation>>, TError = ErrorType<unknown>>(
 params?: GetApiPortalRenovationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRenovation>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPortalRenovationQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiPortalObject = (
    params?: GetApiPortalObjectParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Portal/Object`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiPortalObjectQueryKey = (params?: GetApiPortalObjectParams,) => {
    return [`/api/Portal/Object`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiPortalObjectQueryOptions = <TData = Awaited<ReturnType<typeof getApiPortalObject>>, TError = ErrorType<unknown>>(params?: GetApiPortalObjectParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalObject>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPortalObjectQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPortalObject>>> = ({ signal }) => getApiPortalObject(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPortalObject>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPortalObjectQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPortalObject>>>
export type GetApiPortalObjectQueryError = ErrorType<unknown>



export function useGetApiPortalObject<TData = Awaited<ReturnType<typeof getApiPortalObject>>, TError = ErrorType<unknown>>(
 params?: GetApiPortalObjectParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalObject>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPortalObjectQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiPortalThumbnailId = (
    id: string,
    params?: GetApiPortalThumbnailIdParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Blob>(
      {url: `/api/Portal/thumbnail/${id}`, method: 'GET',
        params,
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetApiPortalThumbnailIdQueryKey = (id: string,
    params?: GetApiPortalThumbnailIdParams,) => {
    return [`/api/Portal/thumbnail/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiPortalThumbnailIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPortalThumbnailId>>, TError = ErrorType<unknown>>(id: string,
    params?: GetApiPortalThumbnailIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalThumbnailId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPortalThumbnailIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPortalThumbnailId>>> = ({ signal }) => getApiPortalThumbnailId(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPortalThumbnailId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPortalThumbnailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPortalThumbnailId>>>
export type GetApiPortalThumbnailIdQueryError = ErrorType<unknown>



export function useGetApiPortalThumbnailId<TData = Awaited<ReturnType<typeof getApiPortalThumbnailId>>, TError = ErrorType<unknown>>(
 id: string,
    params?: GetApiPortalThumbnailIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalThumbnailId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPortalThumbnailIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiPortalObjectsInRenovations = (
    params?: GetApiPortalObjectsInRenovationsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Portal/ObjectsInRenovations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiPortalObjectsInRenovationsQueryKey = (params?: GetApiPortalObjectsInRenovationsParams,) => {
    return [`/api/Portal/ObjectsInRenovations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiPortalObjectsInRenovationsQueryOptions = <TData = Awaited<ReturnType<typeof getApiPortalObjectsInRenovations>>, TError = ErrorType<unknown>>(params?: GetApiPortalObjectsInRenovationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalObjectsInRenovations>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPortalObjectsInRenovationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPortalObjectsInRenovations>>> = ({ signal }) => getApiPortalObjectsInRenovations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPortalObjectsInRenovations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPortalObjectsInRenovationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPortalObjectsInRenovations>>>
export type GetApiPortalObjectsInRenovationsQueryError = ErrorType<unknown>



export function useGetApiPortalObjectsInRenovations<TData = Awaited<ReturnType<typeof getApiPortalObjectsInRenovations>>, TError = ErrorType<unknown>>(
 params?: GetApiPortalObjectsInRenovationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalObjectsInRenovations>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPortalObjectsInRenovationsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiPortalRoomsInRenovations = (
    params?: GetApiPortalRoomsInRenovationsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Portal/RoomsInRenovations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiPortalRoomsInRenovationsQueryKey = (params?: GetApiPortalRoomsInRenovationsParams,) => {
    return [`/api/Portal/RoomsInRenovations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiPortalRoomsInRenovationsQueryOptions = <TData = Awaited<ReturnType<typeof getApiPortalRoomsInRenovations>>, TError = ErrorType<unknown>>(params?: GetApiPortalRoomsInRenovationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRoomsInRenovations>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPortalRoomsInRenovationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPortalRoomsInRenovations>>> = ({ signal }) => getApiPortalRoomsInRenovations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRoomsInRenovations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPortalRoomsInRenovationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPortalRoomsInRenovations>>>
export type GetApiPortalRoomsInRenovationsQueryError = ErrorType<unknown>



export function useGetApiPortalRoomsInRenovations<TData = Awaited<ReturnType<typeof getApiPortalRoomsInRenovations>>, TError = ErrorType<unknown>>(
 params?: GetApiPortalRoomsInRenovationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRoomsInRenovations>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPortalRoomsInRenovationsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiPortalObjectId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/Portal/Object/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiPortalObjectIdQueryKey = (id: string,) => {
    return [`/api/Portal/Object/${id}`] as const;
    }

    
export const getGetApiPortalObjectIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPortalObjectId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalObjectId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPortalObjectIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPortalObjectId>>> = ({ signal }) => getApiPortalObjectId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPortalObjectId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPortalObjectIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPortalObjectId>>>
export type GetApiPortalObjectIdQueryError = ErrorType<unknown>



export function useGetApiPortalObjectId<TData = Awaited<ReturnType<typeof getApiPortalObjectId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalObjectId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPortalObjectIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiPortalRenovationId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Renovation>(
      {url: `/api/Portal/Renovation/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiPortalRenovationIdQueryKey = (id: string,) => {
    return [`/api/Portal/Renovation/${id}`] as const;
    }

    
export const getGetApiPortalRenovationIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPortalRenovationId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRenovationId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPortalRenovationIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPortalRenovationId>>> = ({ signal }) => getApiPortalRenovationId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRenovationId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPortalRenovationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPortalRenovationId>>>
export type GetApiPortalRenovationIdQueryError = ErrorType<unknown>



export function useGetApiPortalRenovationId<TData = Awaited<ReturnType<typeof getApiPortalRenovationId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRenovationId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPortalRenovationIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiPortalRoomId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Room>(
      {url: `/api/Portal/Room/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiPortalRoomIdQueryKey = (id: string,) => {
    return [`/api/Portal/Room/${id}`] as const;
    }

    
export const getGetApiPortalRoomIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPortalRoomId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRoomId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPortalRoomIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPortalRoomId>>> = ({ signal }) => getApiPortalRoomId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRoomId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPortalRoomIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPortalRoomId>>>
export type GetApiPortalRoomIdQueryError = ErrorType<unknown>



export function useGetApiPortalRoomId<TData = Awaited<ReturnType<typeof getApiPortalRoomId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalRoomId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPortalRoomIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiPortalModelRenovationIdRoomId = (
    renovationId: string,
    roomId: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Blob>(
      {url: `/api/Portal/Model/${renovationId}/${roomId}`, method: 'GET',
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetApiPortalModelRenovationIdRoomIdQueryKey = (renovationId: string,
    roomId: string,) => {
    return [`/api/Portal/Model/${renovationId}/${roomId}`] as const;
    }

    
export const getGetApiPortalModelRenovationIdRoomIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPortalModelRenovationIdRoomId>>, TError = ErrorType<unknown>>(renovationId: string,
    roomId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalModelRenovationIdRoomId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPortalModelRenovationIdRoomIdQueryKey(renovationId,roomId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPortalModelRenovationIdRoomId>>> = ({ signal }) => getApiPortalModelRenovationIdRoomId(renovationId,roomId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(renovationId && roomId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPortalModelRenovationIdRoomId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPortalModelRenovationIdRoomIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPortalModelRenovationIdRoomId>>>
export type GetApiPortalModelRenovationIdRoomIdQueryError = ErrorType<unknown>



export function useGetApiPortalModelRenovationIdRoomId<TData = Awaited<ReturnType<typeof getApiPortalModelRenovationIdRoomId>>, TError = ErrorType<unknown>>(
 renovationId: string,
    roomId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalModelRenovationIdRoomId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPortalModelRenovationIdRoomIdQueryOptions(renovationId,roomId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiPortalModelObjectId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Blob>(
      {url: `/api/Portal/Model/Object/${id}`, method: 'GET',
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetApiPortalModelObjectIdQueryKey = (id: string,) => {
    return [`/api/Portal/Model/Object/${id}`] as const;
    }

    
export const getGetApiPortalModelObjectIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPortalModelObjectId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalModelObjectId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPortalModelObjectIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPortalModelObjectId>>> = ({ signal }) => getApiPortalModelObjectId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPortalModelObjectId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPortalModelObjectIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPortalModelObjectId>>>
export type GetApiPortalModelObjectIdQueryError = ErrorType<unknown>



export function useGetApiPortalModelObjectId<TData = Awaited<ReturnType<typeof getApiPortalModelObjectId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPortalModelObjectId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPortalModelObjectIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAdminGetRenovations = (
    params?: GetAdminGetRenovationsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RenovationApiGetReturnType>(
      {url: `/admin/GetRenovations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminGetRenovationsQueryKey = (params?: GetAdminGetRenovationsParams,) => {
    return [`/admin/GetRenovations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminGetRenovationsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminGetRenovations>>, TError = ErrorType<unknown>>(params?: GetAdminGetRenovationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRenovations>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminGetRenovationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminGetRenovations>>> = ({ signal }) => getAdminGetRenovations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRenovations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminGetRenovationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminGetRenovations>>>
export type GetAdminGetRenovationsQueryError = ErrorType<unknown>



export function useGetAdminGetRenovations<TData = Awaited<ReturnType<typeof getAdminGetRenovations>>, TError = ErrorType<unknown>>(
 params?: GetAdminGetRenovationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRenovations>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAdminGetRenovationsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRenovationAvailable = (
    params?: GetApiRenovationAvailableParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RenovationApiGetReturnType>(
      {url: `/api/Renovation/available`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRenovationAvailableQueryKey = (params?: GetApiRenovationAvailableParams,) => {
    return [`/api/Renovation/available`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRenovationAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getApiRenovationAvailable>>, TError = ErrorType<unknown>>(params?: GetApiRenovationAvailableParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationAvailable>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRenovationAvailableQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRenovationAvailable>>> = ({ signal }) => getApiRenovationAvailable(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationAvailable>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRenovationAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRenovationAvailable>>>
export type GetApiRenovationAvailableQueryError = ErrorType<unknown>



export function useGetApiRenovationAvailable<TData = Awaited<ReturnType<typeof getApiRenovationAvailable>>, TError = ErrorType<unknown>>(
 params?: GetApiRenovationAvailableParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationAvailable>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRenovationAvailableQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRenovationRoomId = (
    id: string,
    params?: GetApiRenovationRoomIdParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RenovationApiGetReturnType>(
      {url: `/api/Renovation/room/${id}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRenovationRoomIdQueryKey = (id: string,
    params?: GetApiRenovationRoomIdParams,) => {
    return [`/api/Renovation/room/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRenovationRoomIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRenovationRoomId>>, TError = ErrorType<unknown>>(id: string,
    params?: GetApiRenovationRoomIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationRoomId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRenovationRoomIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRenovationRoomId>>> = ({ signal }) => getApiRenovationRoomId(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationRoomId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRenovationRoomIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRenovationRoomId>>>
export type GetApiRenovationRoomIdQueryError = ErrorType<unknown>



export function useGetApiRenovationRoomId<TData = Awaited<ReturnType<typeof getApiRenovationRoomId>>, TError = ErrorType<unknown>>(
 id: string,
    params?: GetApiRenovationRoomIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationRoomId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRenovationRoomIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRenovationId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Renovation>(
      {url: `/api/Renovation/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiRenovationIdQueryKey = (id: string,) => {
    return [`/api/Renovation/${id}`] as const;
    }

    
export const getGetApiRenovationIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRenovationId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRenovationIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRenovationId>>> = ({ signal }) => getApiRenovationId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRenovationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRenovationId>>>
export type GetApiRenovationIdQueryError = ErrorType<unknown>



export function useGetApiRenovationId<TData = Awaited<ReturnType<typeof getApiRenovationId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRenovationIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiRenovationId = (
    id: string,
    renovation: BodyType<Renovation>,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Renovation>(
      {url: `/api/Renovation/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: renovation
    },
      options);
    }
  


export const getPutApiRenovationIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRenovationId>>, TError,{id: string;data: BodyType<Renovation>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiRenovationId>>, TError,{id: string;data: BodyType<Renovation>}, TContext> => {
    
const mutationKey = ['putApiRenovationId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRenovationId>>, {id: string;data: BodyType<Renovation>}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiRenovationId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiRenovationIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiRenovationId>>>
    export type PutApiRenovationIdMutationBody = BodyType<Renovation>
    export type PutApiRenovationIdMutationError = ErrorType<unknown>

    export const usePutApiRenovationId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRenovationId>>, TError,{id: string;data: BodyType<Renovation>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiRenovationId>>,
        TError,
        {id: string;data: BodyType<Renovation>},
        TContext
      > => {

      const mutationOptions = getPutApiRenovationIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteApiRenovationId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Renovation>(
      {url: `/api/Renovation/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiRenovationIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRenovationId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiRenovationId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteApiRenovationId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiRenovationId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiRenovationId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiRenovationIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiRenovationId>>>
    
    export type DeleteApiRenovationIdMutationError = ErrorType<unknown>

    export const useDeleteApiRenovationId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRenovationId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiRenovationId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiRenovationIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiRenovationThumbnailId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Blob>(
      {url: `/api/Renovation/thumbnail/${id}`, method: 'GET',
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetApiRenovationThumbnailIdQueryKey = (id: string,) => {
    return [`/api/Renovation/thumbnail/${id}`] as const;
    }

    
export const getGetApiRenovationThumbnailIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRenovationThumbnailId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationThumbnailId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRenovationThumbnailIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRenovationThumbnailId>>> = ({ signal }) => getApiRenovationThumbnailId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationThumbnailId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRenovationThumbnailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRenovationThumbnailId>>>
export type GetApiRenovationThumbnailIdQueryError = ErrorType<unknown>



export function useGetApiRenovationThumbnailId<TData = Awaited<ReturnType<typeof getApiRenovationThumbnailId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationThumbnailId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRenovationThumbnailIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiRenovation = (
    postRenovation: BodyType<PostRenovation>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Renovation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postRenovation, signal
    },
      options);
    }
  


export const getPostApiRenovationMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRenovation>>, TError,{data: BodyType<PostRenovation>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRenovation>>, TError,{data: BodyType<PostRenovation>}, TContext> => {
    
const mutationKey = ['postApiRenovation'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRenovation>>, {data: BodyType<PostRenovation>}> = (props) => {
          const {data} = props ?? {};

          return  postApiRenovation(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRenovationMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRenovation>>>
    export type PostApiRenovationMutationBody = BodyType<PostRenovation>
    export type PostApiRenovationMutationError = ErrorType<unknown>

    export const usePostApiRenovation = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRenovation>>, TError,{data: BodyType<PostRenovation>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiRenovation>>,
        TError,
        {data: BodyType<PostRenovation>},
        TContext
      > => {

      const mutationOptions = getPostApiRenovationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const postApiRenovationShareRevoke = (
    postShare: BodyType<PostShare>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Renovation/share/revoke`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postShare, signal
    },
      options);
    }
  


export const getPostApiRenovationShareRevokeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRenovationShareRevoke>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRenovationShareRevoke>>, TError,{data: BodyType<PostShare>}, TContext> => {
    
const mutationKey = ['postApiRenovationShareRevoke'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRenovationShareRevoke>>, {data: BodyType<PostShare>}> = (props) => {
          const {data} = props ?? {};

          return  postApiRenovationShareRevoke(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRenovationShareRevokeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRenovationShareRevoke>>>
    export type PostApiRenovationShareRevokeMutationBody = BodyType<PostShare>
    export type PostApiRenovationShareRevokeMutationError = ErrorType<unknown>

    export const usePostApiRenovationShareRevoke = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRenovationShareRevoke>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiRenovationShareRevoke>>,
        TError,
        {data: BodyType<PostShare>},
        TContext
      > => {

      const mutationOptions = getPostApiRenovationShareRevokeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiRenovationShareGetOwnerInfo = (
    params?: GetApiRenovationShareGetOwnerInfoParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Renovation/share/getOwnerInfo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRenovationShareGetOwnerInfoQueryKey = (params?: GetApiRenovationShareGetOwnerInfoParams,) => {
    return [`/api/Renovation/share/getOwnerInfo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRenovationShareGetOwnerInfoQueryOptions = <TData = Awaited<ReturnType<typeof getApiRenovationShareGetOwnerInfo>>, TError = ErrorType<unknown>>(params?: GetApiRenovationShareGetOwnerInfoParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationShareGetOwnerInfo>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRenovationShareGetOwnerInfoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRenovationShareGetOwnerInfo>>> = ({ signal }) => getApiRenovationShareGetOwnerInfo(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationShareGetOwnerInfo>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRenovationShareGetOwnerInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRenovationShareGetOwnerInfo>>>
export type GetApiRenovationShareGetOwnerInfoQueryError = ErrorType<unknown>



export function useGetApiRenovationShareGetOwnerInfo<TData = Awaited<ReturnType<typeof getApiRenovationShareGetOwnerInfo>>, TError = ErrorType<unknown>>(
 params?: GetApiRenovationShareGetOwnerInfoParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationShareGetOwnerInfo>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRenovationShareGetOwnerInfoQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiRenovationShare = (
    postShare: BodyType<PostShare>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Renovation/share`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postShare, signal
    },
      options);
    }
  


export const getPostApiRenovationShareMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRenovationShare>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRenovationShare>>, TError,{data: BodyType<PostShare>}, TContext> => {
    
const mutationKey = ['postApiRenovationShare'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRenovationShare>>, {data: BodyType<PostShare>}> = (props) => {
          const {data} = props ?? {};

          return  postApiRenovationShare(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRenovationShareMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRenovationShare>>>
    export type PostApiRenovationShareMutationBody = BodyType<PostShare>
    export type PostApiRenovationShareMutationError = ErrorType<unknown>

    export const usePostApiRenovationShare = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRenovationShare>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiRenovationShare>>,
        TError,
        {data: BodyType<PostShare>},
        TContext
      > => {

      const mutationOptions = getPostApiRenovationShareMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiRenovationShareGetUsers = (
    params?: GetApiRenovationShareGetUsersParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Renovation/share/getUsers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRenovationShareGetUsersQueryKey = (params?: GetApiRenovationShareGetUsersParams,) => {
    return [`/api/Renovation/share/getUsers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRenovationShareGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiRenovationShareGetUsers>>, TError = ErrorType<unknown>>(params?: GetApiRenovationShareGetUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationShareGetUsers>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRenovationShareGetUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRenovationShareGetUsers>>> = ({ signal }) => getApiRenovationShareGetUsers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationShareGetUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRenovationShareGetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRenovationShareGetUsers>>>
export type GetApiRenovationShareGetUsersQueryError = ErrorType<unknown>



export function useGetApiRenovationShareGetUsers<TData = Awaited<ReturnType<typeof getApiRenovationShareGetUsers>>, TError = ErrorType<unknown>>(
 params?: GetApiRenovationShareGetUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationShareGetUsers>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRenovationShareGetUsersQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAdminGetRenovationPermissions = (
    params?: GetAdminGetRenovationPermissionsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RenovationPermsApiGetReturnType>(
      {url: `/admin/GetRenovationPermissions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminGetRenovationPermissionsQueryKey = (params?: GetAdminGetRenovationPermissionsParams,) => {
    return [`/admin/GetRenovationPermissions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminGetRenovationPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminGetRenovationPermissions>>, TError = ErrorType<unknown>>(params?: GetAdminGetRenovationPermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRenovationPermissions>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminGetRenovationPermissionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminGetRenovationPermissions>>> = ({ signal }) => getAdminGetRenovationPermissions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRenovationPermissions>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminGetRenovationPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminGetRenovationPermissions>>>
export type GetAdminGetRenovationPermissionsQueryError = ErrorType<unknown>



export function useGetAdminGetRenovationPermissions<TData = Awaited<ReturnType<typeof getAdminGetRenovationPermissions>>, TError = ErrorType<unknown>>(
 params?: GetAdminGetRenovationPermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRenovationPermissions>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAdminGetRenovationPermissionsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRenovationPermissions = (
    params?: GetApiRenovationPermissionsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/RenovationPermissions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRenovationPermissionsQueryKey = (params?: GetApiRenovationPermissionsParams,) => {
    return [`/api/RenovationPermissions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRenovationPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getApiRenovationPermissions>>, TError = ErrorType<unknown>>(params?: GetApiRenovationPermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationPermissions>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRenovationPermissionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRenovationPermissions>>> = ({ signal }) => getApiRenovationPermissions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationPermissions>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRenovationPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRenovationPermissions>>>
export type GetApiRenovationPermissionsQueryError = ErrorType<unknown>



export function useGetApiRenovationPermissions<TData = Awaited<ReturnType<typeof getApiRenovationPermissions>>, TError = ErrorType<unknown>>(
 params?: GetApiRenovationPermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRenovationPermissions>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRenovationPermissionsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiRenovationPermissions = (
    postRenovationPermissions: BodyType<PostRenovationPermissions>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/RenovationPermissions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postRenovationPermissions, signal
    },
      options);
    }
  


export const getPostApiRenovationPermissionsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRenovationPermissions>>, TError,{data: BodyType<PostRenovationPermissions>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRenovationPermissions>>, TError,{data: BodyType<PostRenovationPermissions>}, TContext> => {
    
const mutationKey = ['postApiRenovationPermissions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRenovationPermissions>>, {data: BodyType<PostRenovationPermissions>}> = (props) => {
          const {data} = props ?? {};

          return  postApiRenovationPermissions(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRenovationPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRenovationPermissions>>>
    export type PostApiRenovationPermissionsMutationBody = BodyType<PostRenovationPermissions>
    export type PostApiRenovationPermissionsMutationError = ErrorType<unknown>

    export const usePostApiRenovationPermissions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRenovationPermissions>>, TError,{data: BodyType<PostRenovationPermissions>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiRenovationPermissions>>,
        TError,
        {data: BodyType<PostRenovationPermissions>},
        TContext
      > => {

      const mutationOptions = getPostApiRenovationPermissionsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const putApiRenovationPermissions = (
    renovationPerms: BodyType<RenovationPerms>,
    params?: PutApiRenovationPermissionsParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<RenovationPerms>(
      {url: `/api/RenovationPermissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: renovationPerms,
        params
    },
      options);
    }
  


export const getPutApiRenovationPermissionsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRenovationPermissions>>, TError,{data: BodyType<RenovationPerms>;params?: PutApiRenovationPermissionsParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiRenovationPermissions>>, TError,{data: BodyType<RenovationPerms>;params?: PutApiRenovationPermissionsParams}, TContext> => {
    
const mutationKey = ['putApiRenovationPermissions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRenovationPermissions>>, {data: BodyType<RenovationPerms>;params?: PutApiRenovationPermissionsParams}> = (props) => {
          const {data,params} = props ?? {};

          return  putApiRenovationPermissions(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiRenovationPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof putApiRenovationPermissions>>>
    export type PutApiRenovationPermissionsMutationBody = BodyType<RenovationPerms>
    export type PutApiRenovationPermissionsMutationError = ErrorType<unknown>

    export const usePutApiRenovationPermissions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRenovationPermissions>>, TError,{data: BodyType<RenovationPerms>;params?: PutApiRenovationPermissionsParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiRenovationPermissions>>,
        TError,
        {data: BodyType<RenovationPerms>;params?: PutApiRenovationPermissionsParams},
        TContext
      > => {

      const mutationOptions = getPutApiRenovationPermissionsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteApiRenovationPermissionsRenovationIdUserId = (
    params?: DeleteApiRenovationPermissionsRenovationIdUserIdParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/RenovationPermissions/renovationId, userId}`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteApiRenovationPermissionsRenovationIdUserIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRenovationPermissionsRenovationIdUserId>>, TError,{params?: DeleteApiRenovationPermissionsRenovationIdUserIdParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiRenovationPermissionsRenovationIdUserId>>, TError,{params?: DeleteApiRenovationPermissionsRenovationIdUserIdParams}, TContext> => {
    
const mutationKey = ['deleteApiRenovationPermissionsRenovationIdUserId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiRenovationPermissionsRenovationIdUserId>>, {params?: DeleteApiRenovationPermissionsRenovationIdUserIdParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiRenovationPermissionsRenovationIdUserId(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiRenovationPermissionsRenovationIdUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiRenovationPermissionsRenovationIdUserId>>>
    
    export type DeleteApiRenovationPermissionsRenovationIdUserIdMutationError = ErrorType<unknown>

    export const useDeleteApiRenovationPermissionsRenovationIdUserId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRenovationPermissionsRenovationIdUserId>>, TError,{params?: DeleteApiRenovationPermissionsRenovationIdUserIdParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiRenovationPermissionsRenovationIdUserId>>,
        TError,
        {params?: DeleteApiRenovationPermissionsRenovationIdUserIdParams},
        TContext
      > => {

      const mutationOptions = getDeleteApiRenovationPermissionsRenovationIdUserIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getAdminGetRooms = (
    params?: GetAdminGetRoomsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RoomApiGetReturnType>(
      {url: `/admin/GetRooms`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminGetRoomsQueryKey = (params?: GetAdminGetRoomsParams,) => {
    return [`/admin/GetRooms`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminGetRoomsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminGetRooms>>, TError = ErrorType<unknown>>(params?: GetAdminGetRoomsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRooms>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminGetRoomsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminGetRooms>>> = ({ signal }) => getAdminGetRooms(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRooms>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminGetRoomsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminGetRooms>>>
export type GetAdminGetRoomsQueryError = ErrorType<unknown>



export function useGetAdminGetRooms<TData = Awaited<ReturnType<typeof getAdminGetRooms>>, TError = ErrorType<unknown>>(
 params?: GetAdminGetRoomsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRooms>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAdminGetRoomsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAdminGetRoomModelAdmin = (
    params?: GetAdminGetRoomModelAdminParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Blob>(
      {url: `/admin/GetRoomModelAdmin`, method: 'GET',
        params,
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetAdminGetRoomModelAdminQueryKey = (params?: GetAdminGetRoomModelAdminParams,) => {
    return [`/admin/GetRoomModelAdmin`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminGetRoomModelAdminQueryOptions = <TData = Awaited<ReturnType<typeof getAdminGetRoomModelAdmin>>, TError = ErrorType<unknown>>(params?: GetAdminGetRoomModelAdminParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRoomModelAdmin>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminGetRoomModelAdminQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminGetRoomModelAdmin>>> = ({ signal }) => getAdminGetRoomModelAdmin(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRoomModelAdmin>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminGetRoomModelAdminQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminGetRoomModelAdmin>>>
export type GetAdminGetRoomModelAdminQueryError = ErrorType<unknown>



export function useGetAdminGetRoomModelAdmin<TData = Awaited<ReturnType<typeof getAdminGetRoomModelAdmin>>, TError = ErrorType<unknown>>(
 params?: GetAdminGetRoomModelAdminParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRoomModelAdmin>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAdminGetRoomModelAdminQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRoomAvailable = (
    params?: GetApiRoomAvailableParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RoomApiGetReturnType>(
      {url: `/api/Room/available`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRoomAvailableQueryKey = (params?: GetApiRoomAvailableParams,) => {
    return [`/api/Room/available`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRoomAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoomAvailable>>, TError = ErrorType<unknown>>(params?: GetApiRoomAvailableParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomAvailable>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoomAvailableQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoomAvailable>>> = ({ signal }) => getApiRoomAvailable(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoomAvailable>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRoomAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoomAvailable>>>
export type GetApiRoomAvailableQueryError = ErrorType<unknown>



export function useGetApiRoomAvailable<TData = Awaited<ReturnType<typeof getApiRoomAvailable>>, TError = ErrorType<unknown>>(
 params?: GetApiRoomAvailableParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomAvailable>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRoomAvailableQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRoomOwnerId = (
    id: string,
    params?: GetApiRoomOwnerIdParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RoomApiGetReturnType>(
      {url: `/api/Room/owner/${id}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRoomOwnerIdQueryKey = (id: string,
    params?: GetApiRoomOwnerIdParams,) => {
    return [`/api/Room/owner/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRoomOwnerIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoomOwnerId>>, TError = ErrorType<unknown>>(id: string,
    params?: GetApiRoomOwnerIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomOwnerId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoomOwnerIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoomOwnerId>>> = ({ signal }) => getApiRoomOwnerId(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoomOwnerId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRoomOwnerIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoomOwnerId>>>
export type GetApiRoomOwnerIdQueryError = ErrorType<unknown>



export function useGetApiRoomOwnerId<TData = Awaited<ReturnType<typeof getApiRoomOwnerId>>, TError = ErrorType<unknown>>(
 id: string,
    params?: GetApiRoomOwnerIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomOwnerId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRoomOwnerIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRoomId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Room>(
      {url: `/api/Room/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiRoomIdQueryKey = (id: string,) => {
    return [`/api/Room/${id}`] as const;
    }

    
export const getGetApiRoomIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoomId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoomIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoomId>>> = ({ signal }) => getApiRoomId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoomId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRoomIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoomId>>>
export type GetApiRoomIdQueryError = ErrorType<unknown>



export function useGetApiRoomId<TData = Awaited<ReturnType<typeof getApiRoomId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRoomIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiRoomId = (
    id: string,
    room: BodyType<Room>,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Room/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: room
    },
      options);
    }
  


export const getPutApiRoomIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoomId>>, TError,{id: string;data: BodyType<Room>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiRoomId>>, TError,{id: string;data: BodyType<Room>}, TContext> => {
    
const mutationKey = ['putApiRoomId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRoomId>>, {id: string;data: BodyType<Room>}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiRoomId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiRoomIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiRoomId>>>
    export type PutApiRoomIdMutationBody = BodyType<Room>
    export type PutApiRoomIdMutationError = ErrorType<unknown>

    export const usePutApiRoomId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoomId>>, TError,{id: string;data: BodyType<Room>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiRoomId>>,
        TError,
        {id: string;data: BodyType<Room>},
        TContext
      > => {

      const mutationOptions = getPutApiRoomIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteApiRoomId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/Room/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiRoomIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteApiRoomId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiRoomId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiRoomId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiRoomIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiRoomId>>>
    
    export type DeleteApiRoomIdMutationError = ErrorType<unknown>

    export const useDeleteApiRoomId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiRoomId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiRoomIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiRoomThumbnailId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Blob>(
      {url: `/api/Room/thumbnail/${id}`, method: 'GET',
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetApiRoomThumbnailIdQueryKey = (id: string,) => {
    return [`/api/Room/thumbnail/${id}`] as const;
    }

    
export const getGetApiRoomThumbnailIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoomThumbnailId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomThumbnailId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoomThumbnailIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoomThumbnailId>>> = ({ signal }) => getApiRoomThumbnailId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoomThumbnailId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRoomThumbnailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoomThumbnailId>>>
export type GetApiRoomThumbnailIdQueryError = ErrorType<unknown>



export function useGetApiRoomThumbnailId<TData = Awaited<ReturnType<typeof getApiRoomThumbnailId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomThumbnailId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRoomThumbnailIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRoomModelId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Blob>(
      {url: `/api/Room/model/${id}`, method: 'GET',
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetApiRoomModelIdQueryKey = (id: string,) => {
    return [`/api/Room/model/${id}`] as const;
    }

    
export const getGetApiRoomModelIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoomModelId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomModelId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoomModelIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoomModelId>>> = ({ signal }) => getApiRoomModelId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoomModelId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRoomModelIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoomModelId>>>
export type GetApiRoomModelIdQueryError = ErrorType<unknown>



export function useGetApiRoomModelId<TData = Awaited<ReturnType<typeof getApiRoomModelId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomModelId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRoomModelIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiRoomCreateAndGenerate = (
    postApiRoomCreateAndGenerateBody: BodyType<PostApiRoomCreateAndGenerateBody>,
    params?: PostApiRoomCreateAndGenerateParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiRoomCreateAndGenerateBody.file !== undefined) {
 formData.append('file', postApiRoomCreateAndGenerateBody.file)
 }

      return axiosInstance<void>(
      {url: `/api/Room/createAndGenerate`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params, signal
    },
      options);
    }
  


export const getPostApiRoomCreateAndGenerateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoomCreateAndGenerate>>, TError,{data: BodyType<PostApiRoomCreateAndGenerateBody>;params?: PostApiRoomCreateAndGenerateParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRoomCreateAndGenerate>>, TError,{data: BodyType<PostApiRoomCreateAndGenerateBody>;params?: PostApiRoomCreateAndGenerateParams}, TContext> => {
    
const mutationKey = ['postApiRoomCreateAndGenerate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRoomCreateAndGenerate>>, {data: BodyType<PostApiRoomCreateAndGenerateBody>;params?: PostApiRoomCreateAndGenerateParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiRoomCreateAndGenerate(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRoomCreateAndGenerateMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRoomCreateAndGenerate>>>
    export type PostApiRoomCreateAndGenerateMutationBody = BodyType<PostApiRoomCreateAndGenerateBody>
    export type PostApiRoomCreateAndGenerateMutationError = ErrorType<unknown>

    export const usePostApiRoomCreateAndGenerate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoomCreateAndGenerate>>, TError,{data: BodyType<PostApiRoomCreateAndGenerateBody>;params?: PostApiRoomCreateAndGenerateParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiRoomCreateAndGenerate>>,
        TError,
        {data: BodyType<PostApiRoomCreateAndGenerateBody>;params?: PostApiRoomCreateAndGenerateParams},
        TContext
      > => {

      const mutationOptions = getPostApiRoomCreateAndGenerateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const postApiRoom = (
    postRoom: BodyType<PostRoom>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Room`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postRoom, signal
    },
      options);
    }
  


export const getPostApiRoomMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoom>>, TError,{data: BodyType<PostRoom>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRoom>>, TError,{data: BodyType<PostRoom>}, TContext> => {
    
const mutationKey = ['postApiRoom'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRoom>>, {data: BodyType<PostRoom>}> = (props) => {
          const {data} = props ?? {};

          return  postApiRoom(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRoomMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRoom>>>
    export type PostApiRoomMutationBody = BodyType<PostRoom>
    export type PostApiRoomMutationError = ErrorType<unknown>

    export const usePostApiRoom = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoom>>, TError,{data: BodyType<PostRoom>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiRoom>>,
        TError,
        {data: BodyType<PostRoom>},
        TContext
      > => {

      const mutationOptions = getPostApiRoomMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const putApiRoomGsServiceModelGenerated = (
    params?: PutApiRoomGsServiceModelGeneratedParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Room>(
      {url: `/api/Room/gsService/modelGenerated`, method: 'PUT',
        params
    },
      options);
    }
  


export const getPutApiRoomGsServiceModelGeneratedMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoomGsServiceModelGenerated>>, TError,{params?: PutApiRoomGsServiceModelGeneratedParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiRoomGsServiceModelGenerated>>, TError,{params?: PutApiRoomGsServiceModelGeneratedParams}, TContext> => {
    
const mutationKey = ['putApiRoomGsServiceModelGenerated'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRoomGsServiceModelGenerated>>, {params?: PutApiRoomGsServiceModelGeneratedParams}> = (props) => {
          const {params} = props ?? {};

          return  putApiRoomGsServiceModelGenerated(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiRoomGsServiceModelGeneratedMutationResult = NonNullable<Awaited<ReturnType<typeof putApiRoomGsServiceModelGenerated>>>
    
    export type PutApiRoomGsServiceModelGeneratedMutationError = ErrorType<unknown>

    export const usePutApiRoomGsServiceModelGenerated = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoomGsServiceModelGenerated>>, TError,{params?: PutApiRoomGsServiceModelGeneratedParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiRoomGsServiceModelGenerated>>,
        TError,
        {params?: PutApiRoomGsServiceModelGeneratedParams},
        TContext
      > => {

      const mutationOptions = getPutApiRoomGsServiceModelGeneratedMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const putApiRoomGsServiceError = (
    params?: PutApiRoomGsServiceErrorParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Room/gsService/error`, method: 'PUT',
        params
    },
      options);
    }
  


export const getPutApiRoomGsServiceErrorMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoomGsServiceError>>, TError,{params?: PutApiRoomGsServiceErrorParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiRoomGsServiceError>>, TError,{params?: PutApiRoomGsServiceErrorParams}, TContext> => {
    
const mutationKey = ['putApiRoomGsServiceError'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRoomGsServiceError>>, {params?: PutApiRoomGsServiceErrorParams}> = (props) => {
          const {params} = props ?? {};

          return  putApiRoomGsServiceError(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiRoomGsServiceErrorMutationResult = NonNullable<Awaited<ReturnType<typeof putApiRoomGsServiceError>>>
    
    export type PutApiRoomGsServiceErrorMutationError = ErrorType<unknown>

    export const usePutApiRoomGsServiceError = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoomGsServiceError>>, TError,{params?: PutApiRoomGsServiceErrorParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiRoomGsServiceError>>,
        TError,
        {params?: PutApiRoomGsServiceErrorParams},
        TContext
      > => {

      const mutationOptions = getPutApiRoomGsServiceErrorMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiRoomGsServiceError = (
    params?: GetApiRoomGsServiceErrorParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Room/gsService/error`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRoomGsServiceErrorQueryKey = (params?: GetApiRoomGsServiceErrorParams,) => {
    return [`/api/Room/gsService/error`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRoomGsServiceErrorQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoomGsServiceError>>, TError = ErrorType<unknown>>(params?: GetApiRoomGsServiceErrorParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomGsServiceError>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoomGsServiceErrorQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoomGsServiceError>>> = ({ signal }) => getApiRoomGsServiceError(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoomGsServiceError>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRoomGsServiceErrorQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoomGsServiceError>>>
export type GetApiRoomGsServiceErrorQueryError = ErrorType<unknown>



export function useGetApiRoomGsServiceError<TData = Awaited<ReturnType<typeof getApiRoomGsServiceError>>, TError = ErrorType<unknown>>(
 params?: GetApiRoomGsServiceErrorParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomGsServiceError>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRoomGsServiceErrorQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRoomShareGetOwnerInfo = (
    params?: GetApiRoomShareGetOwnerInfoParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Room/share/getOwnerInfo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRoomShareGetOwnerInfoQueryKey = (params?: GetApiRoomShareGetOwnerInfoParams,) => {
    return [`/api/Room/share/getOwnerInfo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRoomShareGetOwnerInfoQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoomShareGetOwnerInfo>>, TError = ErrorType<unknown>>(params?: GetApiRoomShareGetOwnerInfoParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomShareGetOwnerInfo>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoomShareGetOwnerInfoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoomShareGetOwnerInfo>>> = ({ signal }) => getApiRoomShareGetOwnerInfo(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoomShareGetOwnerInfo>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRoomShareGetOwnerInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoomShareGetOwnerInfo>>>
export type GetApiRoomShareGetOwnerInfoQueryError = ErrorType<unknown>



export function useGetApiRoomShareGetOwnerInfo<TData = Awaited<ReturnType<typeof getApiRoomShareGetOwnerInfo>>, TError = ErrorType<unknown>>(
 params?: GetApiRoomShareGetOwnerInfoParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomShareGetOwnerInfo>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRoomShareGetOwnerInfoQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiRoomShare = (
    postShare: BodyType<PostShare>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Room/share`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postShare, signal
    },
      options);
    }
  


export const getPostApiRoomShareMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoomShare>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRoomShare>>, TError,{data: BodyType<PostShare>}, TContext> => {
    
const mutationKey = ['postApiRoomShare'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRoomShare>>, {data: BodyType<PostShare>}> = (props) => {
          const {data} = props ?? {};

          return  postApiRoomShare(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRoomShareMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRoomShare>>>
    export type PostApiRoomShareMutationBody = BodyType<PostShare>
    export type PostApiRoomShareMutationError = ErrorType<unknown>

    export const usePostApiRoomShare = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoomShare>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiRoomShare>>,
        TError,
        {data: BodyType<PostShare>},
        TContext
      > => {

      const mutationOptions = getPostApiRoomShareMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteApiRoomShareRevoke = (
    postShare: BodyType<PostShare>,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Room/share/revoke`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: postShare
    },
      options);
    }
  


export const getDeleteApiRoomShareRevokeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomShareRevoke>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomShareRevoke>>, TError,{data: BodyType<PostShare>}, TContext> => {
    
const mutationKey = ['deleteApiRoomShareRevoke'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiRoomShareRevoke>>, {data: BodyType<PostShare>}> = (props) => {
          const {data} = props ?? {};

          return  deleteApiRoomShareRevoke(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiRoomShareRevokeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiRoomShareRevoke>>>
    export type DeleteApiRoomShareRevokeMutationBody = BodyType<PostShare>
    export type DeleteApiRoomShareRevokeMutationError = ErrorType<unknown>

    export const useDeleteApiRoomShareRevoke = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomShareRevoke>>, TError,{data: BodyType<PostShare>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiRoomShareRevoke>>,
        TError,
        {data: BodyType<PostShare>},
        TContext
      > => {

      const mutationOptions = getDeleteApiRoomShareRevokeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiRoomShareGetUsers = (
    params?: GetApiRoomShareGetUsersParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Room/share/getUsers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRoomShareGetUsersQueryKey = (params?: GetApiRoomShareGetUsersParams,) => {
    return [`/api/Room/share/getUsers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRoomShareGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoomShareGetUsers>>, TError = ErrorType<unknown>>(params?: GetApiRoomShareGetUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomShareGetUsers>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoomShareGetUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoomShareGetUsers>>> = ({ signal }) => getApiRoomShareGetUsers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoomShareGetUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRoomShareGetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoomShareGetUsers>>>
export type GetApiRoomShareGetUsersQueryError = ErrorType<unknown>



export function useGetApiRoomShareGetUsers<TData = Awaited<ReturnType<typeof getApiRoomShareGetUsers>>, TError = ErrorType<unknown>>(
 params?: GetApiRoomShareGetUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomShareGetUsers>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRoomShareGetUsersQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAdminGetRoomPermissions = (
    params?: GetAdminGetRoomPermissionsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RoomPermsApiGetReturnType>(
      {url: `/admin/GetRoomPermissions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminGetRoomPermissionsQueryKey = (params?: GetAdminGetRoomPermissionsParams,) => {
    return [`/admin/GetRoomPermissions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminGetRoomPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminGetRoomPermissions>>, TError = ErrorType<unknown>>(params?: GetAdminGetRoomPermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRoomPermissions>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminGetRoomPermissionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminGetRoomPermissions>>> = ({ signal }) => getAdminGetRoomPermissions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRoomPermissions>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminGetRoomPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminGetRoomPermissions>>>
export type GetAdminGetRoomPermissionsQueryError = ErrorType<unknown>



export function useGetAdminGetRoomPermissions<TData = Awaited<ReturnType<typeof getAdminGetRoomPermissions>>, TError = ErrorType<unknown>>(
 params?: GetAdminGetRoomPermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRoomPermissions>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAdminGetRoomPermissionsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRoomPermissions = (
    params?: GetApiRoomPermissionsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/RoomPermissions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRoomPermissionsQueryKey = (params?: GetApiRoomPermissionsParams,) => {
    return [`/api/RoomPermissions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRoomPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoomPermissions>>, TError = ErrorType<unknown>>(params?: GetApiRoomPermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomPermissions>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoomPermissionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoomPermissions>>> = ({ signal }) => getApiRoomPermissions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoomPermissions>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRoomPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoomPermissions>>>
export type GetApiRoomPermissionsQueryError = ErrorType<unknown>



export function useGetApiRoomPermissions<TData = Awaited<ReturnType<typeof getApiRoomPermissions>>, TError = ErrorType<unknown>>(
 params?: GetApiRoomPermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomPermissions>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRoomPermissionsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiRoomPermissions = (
    postRoomPermissions: BodyType<PostRoomPermissions>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/RoomPermissions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postRoomPermissions, signal
    },
      options);
    }
  


export const getPostApiRoomPermissionsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoomPermissions>>, TError,{data: BodyType<PostRoomPermissions>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRoomPermissions>>, TError,{data: BodyType<PostRoomPermissions>}, TContext> => {
    
const mutationKey = ['postApiRoomPermissions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRoomPermissions>>, {data: BodyType<PostRoomPermissions>}> = (props) => {
          const {data} = props ?? {};

          return  postApiRoomPermissions(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRoomPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRoomPermissions>>>
    export type PostApiRoomPermissionsMutationBody = BodyType<PostRoomPermissions>
    export type PostApiRoomPermissionsMutationError = ErrorType<unknown>

    export const usePostApiRoomPermissions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoomPermissions>>, TError,{data: BodyType<PostRoomPermissions>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiRoomPermissions>>,
        TError,
        {data: BodyType<PostRoomPermissions>},
        TContext
      > => {

      const mutationOptions = getPostApiRoomPermissionsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const putApiRoomPermissions = (
    roomPerms: BodyType<RoomPerms>,
    params?: PutApiRoomPermissionsParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<RoomPerms>(
      {url: `/api/RoomPermissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: roomPerms,
        params
    },
      options);
    }
  


export const getPutApiRoomPermissionsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoomPermissions>>, TError,{data: BodyType<RoomPerms>;params?: PutApiRoomPermissionsParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiRoomPermissions>>, TError,{data: BodyType<RoomPerms>;params?: PutApiRoomPermissionsParams}, TContext> => {
    
const mutationKey = ['putApiRoomPermissions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRoomPermissions>>, {data: BodyType<RoomPerms>;params?: PutApiRoomPermissionsParams}> = (props) => {
          const {data,params} = props ?? {};

          return  putApiRoomPermissions(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiRoomPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof putApiRoomPermissions>>>
    export type PutApiRoomPermissionsMutationBody = BodyType<RoomPerms>
    export type PutApiRoomPermissionsMutationError = ErrorType<unknown>

    export const usePutApiRoomPermissions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoomPermissions>>, TError,{data: BodyType<RoomPerms>;params?: PutApiRoomPermissionsParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiRoomPermissions>>,
        TError,
        {data: BodyType<RoomPerms>;params?: PutApiRoomPermissionsParams},
        TContext
      > => {

      const mutationOptions = getPutApiRoomPermissionsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteApiRoomPermissionsRoomIdUserId = (
    params?: DeleteApiRoomPermissionsRoomIdUserIdParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/RoomPermissions/roomId, userId}`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteApiRoomPermissionsRoomIdUserIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomPermissionsRoomIdUserId>>, TError,{params?: DeleteApiRoomPermissionsRoomIdUserIdParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomPermissionsRoomIdUserId>>, TError,{params?: DeleteApiRoomPermissionsRoomIdUserIdParams}, TContext> => {
    
const mutationKey = ['deleteApiRoomPermissionsRoomIdUserId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiRoomPermissionsRoomIdUserId>>, {params?: DeleteApiRoomPermissionsRoomIdUserIdParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiRoomPermissionsRoomIdUserId(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiRoomPermissionsRoomIdUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiRoomPermissionsRoomIdUserId>>>
    
    export type DeleteApiRoomPermissionsRoomIdUserIdMutationError = ErrorType<unknown>

    export const useDeleteApiRoomPermissionsRoomIdUserId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomPermissionsRoomIdUserId>>, TError,{params?: DeleteApiRoomPermissionsRoomIdUserIdParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiRoomPermissionsRoomIdUserId>>,
        TError,
        {params?: DeleteApiRoomPermissionsRoomIdUserIdParams},
        TContext
      > => {

      const mutationOptions = getDeleteApiRoomPermissionsRoomIdUserIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getAdminGetRoomsInRenovations = (
    params?: GetAdminGetRoomsInRenovationsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RoomInRenovationApiGetReturnType>(
      {url: `/admin/GetRoomsInRenovations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminGetRoomsInRenovationsQueryKey = (params?: GetAdminGetRoomsInRenovationsParams,) => {
    return [`/admin/GetRoomsInRenovations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminGetRoomsInRenovationsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminGetRoomsInRenovations>>, TError = ErrorType<unknown>>(params?: GetAdminGetRoomsInRenovationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRoomsInRenovations>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminGetRoomsInRenovationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminGetRoomsInRenovations>>> = ({ signal }) => getAdminGetRoomsInRenovations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRoomsInRenovations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminGetRoomsInRenovationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminGetRoomsInRenovations>>>
export type GetAdminGetRoomsInRenovationsQueryError = ErrorType<unknown>



export function useGetAdminGetRoomsInRenovations<TData = Awaited<ReturnType<typeof getAdminGetRoomsInRenovations>>, TError = ErrorType<unknown>>(
 params?: GetAdminGetRoomsInRenovationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminGetRoomsInRenovations>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAdminGetRoomsInRenovationsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiRoomsInRenovationsAvailable = (
    params?: GetApiRoomsInRenovationsAvailableParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/RoomsInRenovations/available`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiRoomsInRenovationsAvailableQueryKey = (params?: GetApiRoomsInRenovationsAvailableParams,) => {
    return [`/api/RoomsInRenovations/available`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRoomsInRenovationsAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoomsInRenovationsAvailable>>, TError = ErrorType<unknown>>(params?: GetApiRoomsInRenovationsAvailableParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomsInRenovationsAvailable>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoomsInRenovationsAvailableQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoomsInRenovationsAvailable>>> = ({ signal }) => getApiRoomsInRenovationsAvailable(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoomsInRenovationsAvailable>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiRoomsInRenovationsAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoomsInRenovationsAvailable>>>
export type GetApiRoomsInRenovationsAvailableQueryError = ErrorType<unknown>



export function useGetApiRoomsInRenovationsAvailable<TData = Awaited<ReturnType<typeof getApiRoomsInRenovationsAvailable>>, TError = ErrorType<unknown>>(
 params?: GetApiRoomsInRenovationsAvailableParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiRoomsInRenovationsAvailable>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiRoomsInRenovationsAvailableQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiRoomsInRenovations = (
    postRoomInRenovation: BodyType<PostRoomInRenovation>,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Room>(
      {url: `/api/RoomsInRenovations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postRoomInRenovation, signal
    },
      options);
    }
  


export const getPostApiRoomsInRenovationsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoomsInRenovations>>, TError,{data: BodyType<PostRoomInRenovation>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRoomsInRenovations>>, TError,{data: BodyType<PostRoomInRenovation>}, TContext> => {
    
const mutationKey = ['postApiRoomsInRenovations'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRoomsInRenovations>>, {data: BodyType<PostRoomInRenovation>}> = (props) => {
          const {data} = props ?? {};

          return  postApiRoomsInRenovations(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRoomsInRenovationsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRoomsInRenovations>>>
    export type PostApiRoomsInRenovationsMutationBody = BodyType<PostRoomInRenovation>
    export type PostApiRoomsInRenovationsMutationError = ErrorType<unknown>

    export const usePostApiRoomsInRenovations = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoomsInRenovations>>, TError,{data: BodyType<PostRoomInRenovation>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiRoomsInRenovations>>,
        TError,
        {data: BodyType<PostRoomInRenovation>},
        TContext
      > => {

      const mutationOptions = getPostApiRoomsInRenovationsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const putApiRoomsInRenovations = (
    roomInRenovation: BodyType<RoomInRenovation>,
    params?: PutApiRoomsInRenovationsParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<RoomInRenovation>(
      {url: `/api/RoomsInRenovations`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: roomInRenovation,
        params
    },
      options);
    }
  


export const getPutApiRoomsInRenovationsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoomsInRenovations>>, TError,{data: BodyType<RoomInRenovation>;params?: PutApiRoomsInRenovationsParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiRoomsInRenovations>>, TError,{data: BodyType<RoomInRenovation>;params?: PutApiRoomsInRenovationsParams}, TContext> => {
    
const mutationKey = ['putApiRoomsInRenovations'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRoomsInRenovations>>, {data: BodyType<RoomInRenovation>;params?: PutApiRoomsInRenovationsParams}> = (props) => {
          const {data,params} = props ?? {};

          return  putApiRoomsInRenovations(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiRoomsInRenovationsMutationResult = NonNullable<Awaited<ReturnType<typeof putApiRoomsInRenovations>>>
    export type PutApiRoomsInRenovationsMutationBody = BodyType<RoomInRenovation>
    export type PutApiRoomsInRenovationsMutationError = ErrorType<unknown>

    export const usePutApiRoomsInRenovations = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoomsInRenovations>>, TError,{data: BodyType<RoomInRenovation>;params?: PutApiRoomsInRenovationsParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiRoomsInRenovations>>,
        TError,
        {data: BodyType<RoomInRenovation>;params?: PutApiRoomsInRenovationsParams},
        TContext
      > => {

      const mutationOptions = getPutApiRoomsInRenovationsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteApiRoomsInRenovationsId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Obj>(
      {url: `/api/RoomsInRenovations/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiRoomsInRenovationsIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomsInRenovationsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomsInRenovationsId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteApiRoomsInRenovationsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiRoomsInRenovationsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiRoomsInRenovationsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiRoomsInRenovationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiRoomsInRenovationsId>>>
    
    export type DeleteApiRoomsInRenovationsIdMutationError = ErrorType<unknown>

    export const useDeleteApiRoomsInRenovationsId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoomsInRenovationsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiRoomsInRenovationsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiRoomsInRenovationsIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const patchApiUsersUpdateMetadata = (
    userMetadata: BodyType<UserMetadata>,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Users/update/metadata`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userMetadata
    },
      options);
    }
  


export const getPatchApiUsersUpdateMetadataMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadata>>, TError,{data: BodyType<UserMetadata>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadata>>, TError,{data: BodyType<UserMetadata>}, TContext> => {
    
const mutationKey = ['patchApiUsersUpdateMetadata'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiUsersUpdateMetadata>>, {data: BodyType<UserMetadata>}> = (props) => {
          const {data} = props ?? {};

          return  patchApiUsersUpdateMetadata(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiUsersUpdateMetadataMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiUsersUpdateMetadata>>>
    export type PatchApiUsersUpdateMetadataMutationBody = BodyType<UserMetadata>
    export type PatchApiUsersUpdateMetadataMutationError = ErrorType<unknown>

    export const usePatchApiUsersUpdateMetadata = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadata>>, TError,{data: BodyType<UserMetadata>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchApiUsersUpdateMetadata>>,
        TError,
        {data: BodyType<UserMetadata>},
        TContext
      > => {

      const mutationOptions = getPatchApiUsersUpdateMetadataMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const patchApiUsersUpdateMetadataShop = (
    userMetadataShop: BodyType<UserMetadataShop>,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Users/update/metadata/shop`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userMetadataShop
    },
      options);
    }
  


export const getPatchApiUsersUpdateMetadataShopMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataShop>>, TError,{data: BodyType<UserMetadataShop>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataShop>>, TError,{data: BodyType<UserMetadataShop>}, TContext> => {
    
const mutationKey = ['patchApiUsersUpdateMetadataShop'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataShop>>, {data: BodyType<UserMetadataShop>}> = (props) => {
          const {data} = props ?? {};

          return  patchApiUsersUpdateMetadataShop(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiUsersUpdateMetadataShopMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataShop>>>
    export type PatchApiUsersUpdateMetadataShopMutationBody = BodyType<UserMetadataShop>
    export type PatchApiUsersUpdateMetadataShopMutationError = ErrorType<unknown>

    export const usePatchApiUsersUpdateMetadataShop = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataShop>>, TError,{data: BodyType<UserMetadataShop>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchApiUsersUpdateMetadataShop>>,
        TError,
        {data: BodyType<UserMetadataShop>},
        TContext
      > => {

      const mutationOptions = getPatchApiUsersUpdateMetadataShopMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const patchApiUsersUpdateMetadataDecorator = (
    userMetadataDecorator: BodyType<UserMetadataDecorator>,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Users/update/metadata/decorator`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userMetadataDecorator
    },
      options);
    }
  


export const getPatchApiUsersUpdateMetadataDecoratorMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataDecorator>>, TError,{data: BodyType<UserMetadataDecorator>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataDecorator>>, TError,{data: BodyType<UserMetadataDecorator>}, TContext> => {
    
const mutationKey = ['patchApiUsersUpdateMetadataDecorator'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataDecorator>>, {data: BodyType<UserMetadataDecorator>}> = (props) => {
          const {data} = props ?? {};

          return  patchApiUsersUpdateMetadataDecorator(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiUsersUpdateMetadataDecoratorMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataDecorator>>>
    export type PatchApiUsersUpdateMetadataDecoratorMutationBody = BodyType<UserMetadataDecorator>
    export type PatchApiUsersUpdateMetadataDecoratorMutationError = ErrorType<unknown>

    export const usePatchApiUsersUpdateMetadataDecorator = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataDecorator>>, TError,{data: BodyType<UserMetadataDecorator>}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchApiUsersUpdateMetadataDecorator>>,
        TError,
        {data: BodyType<UserMetadataDecorator>},
        TContext
      > => {

      const mutationOptions = getPatchApiUsersUpdateMetadataDecoratorMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const patchApiUsersUpdateMetadataClear = (
    params?: PatchApiUsersUpdateMetadataClearParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Users/update/metadata/clear`, method: 'PATCH',
        params
    },
      options);
    }
  


export const getPatchApiUsersUpdateMetadataClearMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataClear>>, TError,{params?: PatchApiUsersUpdateMetadataClearParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataClear>>, TError,{params?: PatchApiUsersUpdateMetadataClearParams}, TContext> => {
    
const mutationKey = ['patchApiUsersUpdateMetadataClear'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataClear>>, {params?: PatchApiUsersUpdateMetadataClearParams}> = (props) => {
          const {params} = props ?? {};

          return  patchApiUsersUpdateMetadataClear(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiUsersUpdateMetadataClearMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataClear>>>
    
    export type PatchApiUsersUpdateMetadataClearMutationError = ErrorType<unknown>

    export const usePatchApiUsersUpdateMetadataClear = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersUpdateMetadataClear>>, TError,{params?: PatchApiUsersUpdateMetadataClearParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchApiUsersUpdateMetadataClear>>,
        TError,
        {params?: PatchApiUsersUpdateMetadataClearParams},
        TContext
      > => {

      const mutationOptions = getPatchApiUsersUpdateMetadataClearMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getUserHasRole = (
    params?: GetUserHasRoleParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/user/hasRole`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetUserHasRoleQueryKey = (params?: GetUserHasRoleParams,) => {
    return [`/user/hasRole`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserHasRoleQueryOptions = <TData = Awaited<ReturnType<typeof getUserHasRole>>, TError = ErrorType<unknown>>(params?: GetUserHasRoleParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserHasRole>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserHasRoleQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserHasRole>>> = ({ signal }) => getUserHasRole(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserHasRole>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserHasRoleQueryResult = NonNullable<Awaited<ReturnType<typeof getUserHasRole>>>
export type GetUserHasRoleQueryError = ErrorType<unknown>



export function useGetUserHasRole<TData = Awaited<ReturnType<typeof getUserHasRole>>, TError = ErrorType<unknown>>(
 params?: GetUserHasRoleParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserHasRole>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserHasRoleQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const patchApiUsersPasswordReset = (
    params?: PatchApiUsersPasswordResetParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Users/password/reset`, method: 'PATCH',
        params
    },
      options);
    }
  


export const getPatchApiUsersPasswordResetMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersPasswordReset>>, TError,{params?: PatchApiUsersPasswordResetParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersPasswordReset>>, TError,{params?: PatchApiUsersPasswordResetParams}, TContext> => {
    
const mutationKey = ['patchApiUsersPasswordReset'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiUsersPasswordReset>>, {params?: PatchApiUsersPasswordResetParams}> = (props) => {
          const {params} = props ?? {};

          return  patchApiUsersPasswordReset(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiUsersPasswordResetMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiUsersPasswordReset>>>
    
    export type PatchApiUsersPasswordResetMutationError = ErrorType<unknown>

    export const usePatchApiUsersPasswordReset = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersPasswordReset>>, TError,{params?: PatchApiUsersPasswordResetParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchApiUsersPasswordReset>>,
        TError,
        {params?: PatchApiUsersPasswordResetParams},
        TContext
      > => {

      const mutationOptions = getPatchApiUsersPasswordResetMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiUsersDecoratorId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Users/decorator/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiUsersDecoratorIdQueryKey = (id: string,) => {
    return [`/api/Users/decorator/${id}`] as const;
    }

    
export const getGetApiUsersDecoratorIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersDecoratorId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsersDecoratorId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersDecoratorIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersDecoratorId>>> = ({ signal }) => getApiUsersDecoratorId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersDecoratorId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsersDecoratorIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersDecoratorId>>>
export type GetApiUsersDecoratorIdQueryError = ErrorType<unknown>



export function useGetApiUsersDecoratorId<TData = Awaited<ReturnType<typeof getApiUsersDecoratorId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsersDecoratorId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiUsersDecoratorIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiUsersShopId = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/Users/shop/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiUsersShopIdQueryKey = (id: string,) => {
    return [`/api/Users/shop/${id}`] as const;
    }

    
export const getGetApiUsersShopIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersShopId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsersShopId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersShopIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersShopId>>> = ({ signal }) => getApiUsersShopId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersShopId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsersShopIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersShopId>>>
export type GetApiUsersShopIdQueryError = ErrorType<unknown>



export function useGetApiUsersShopId<TData = Awaited<ReturnType<typeof getApiUsersShopId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsersShopId>>, TError, TData>, request?: SecondParameter<typeof axiosInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiUsersShopIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




